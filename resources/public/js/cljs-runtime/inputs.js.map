{"version":3,"sources":["inputs.cljs"],"mappings":";AAMA,mBAAA,nBAAMA;AAAN,AACE,IAAMG,MAAI,sDAAA,mFAAA,zIAACC;AAAX,AAAA,0FAAA,sDAAA,2CAAA,sDAAA,AAAAH,qBAAA,+DAAA,WAAAC,/EACiBC;AADjB,AAEqB,8BAAA,mFAAA,1GAACE,kMAAqC,AAAA,AAAAH;;;AAE7D,mBAAA,nBAAMI;AAAN,AACE,IAAME,MAAI,sDAAA,mFAAA,zIAACJ;AAAX,AAAA,0FAAA,sDAAA,2CAAA,sDAAA,AAAAH,qBAAA,+DAAA,WAAAM,/EACiBC;AADjB,AAEqB,8BAAA,mFAAA,1GAACH,kMAAqC,AAAA,AAAAE;;;AAE7D,uBAAA,vBAAMG;AAAN,AAAA,0FAAA,yDAAA,2CAAA,sEAAA,OAAA,+DAAA,WAAAD;AAAA,AAEwB,8BAAA,mFAAA,1GAACJ,yMAAwC,AAAA,AAAAI;WAC9D,iBAAAE,qBAAA,6CAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBAy7EgD,AAAAqB,sBAAA1B;IAz7EhDM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,QAAA,AAAAK,eAAAN,gBAAAK,nCAAMU;AAAN,AAAA,AAAA,AAAAR,uBAAAJ,SAAA,oBAAA,mFAAA,uDAAA,2CAAA,0EAAA,2CAAA,oDACSY,nHACUA,UAAGA;;AAFtB,eAAA,CAAAV,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,mCAAA,AAAAC,qBAAAhB;;AAAA,OAAAa,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,QAAA,AAAAS,gBAAAjB,pBAAMoB;AAAN,AAAA,OAAAF,eAAA,oBAAA,mFAAA,uDAAA,2CAAA,0EAAA,2CAAA,+DAAA,AAAAH,mCAAA,AAAAI,eAAAnB,7DACSoB,nHACUA,UAAGA;;;AAFtB;;;;GAAA,KAAA;;AAAA,AAAA,OAAArB,mBAAA,mFAAA,OAAA;;;AAIH,qBAAA,rBAAMuB;AAAN,AAAA,0FAAA,sDAAA,2CAAA,qDAAA,sDAAA,+DAAA,WAAAD;AAAA,AAEuB,8BAAA,mFAAA,1GAAC5B,iMAAqC,AAAA,AAAA4B;;;AAE7D,uBAAA,vBAAME;AAAN,AACE,IAAME,UAAQ,sDAAA,mFAAA,zIAACjC;AAAf,AAAA,0FAAA,sDAAA,2CAAA,sDAAA,AAAAH,yBAAA,+DAAA,WAAAmC,nFACiBC;AADjB,AAEqB,8BAAA,mFAAA,1GAAChC,2MAAyC,AAAA,AAAA+B","names":["inputs/fio-input","cljs.core/deref","p1__43656#","fio","re_frame.core.subscribe","re-frame.core/dispatch","inputs/oms-input","p1__43657#","oms","p1__43658#","inputs/gender-select","iter__5523__auto__","s__43660","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__43662","cljs.core/chunk-buffer","i__43661","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__43659","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","g","p1__43663#","inputs/birth-input","inputs/address-input","p1__43664#","address","cljs.core/chunk-first"],"sourcesContent":["(ns inputs\n  (:require [clojure.string :as str]\n            [reagent.core :as r]\n            [re-frame.core :as rf]\n            [app-events]))\n\n(defn fio-input []\n  (let [fio (rf/subscribe [:new-patient-fio])]\n  [:input {:value @fio\n           :on-change #(rf/dispatch [:new-patient-fio-update (-> % .-target .-value)])}]))\n\n(defn oms-input []\n  (let [oms (rf/subscribe [:new-patient-oms])]\n  [:input {:value @oms\n           :on-change #(rf/dispatch [:new-patient-oms-update (-> % .-target .-value)])}]))\n\n(defn gender-select []\n  [:select {:default-value \"male\"\n            :on-change #(rf/dispatch [:new-patient-gender-update (-> % .-target .-value)])}\n   (for [g [\"male\" \"female\"]]\n     ^{:key g}\n     [:option {:value g} g])])\n\n(defn birth-input []\n  [:input {:type :date\n           :on-change #(rf/dispatch [:new-patient-dob-update (-> % .-target .-value)]) }])\n\n(defn address-input []\n  (let [address (rf/subscribe [:new-patient-address])]\n  [:input {:value @address\n           :on-change #(rf/dispatch [:new-patient-address-update (-> % .-target .-value)])}]))\n"]}