{"version":3,"sources":["stylo/core.cljc"],"mappings":";AA0BA,GAAA,QAAAA,kCAAAC,uCAAAC;AAAA;AAAA,AAAA,AAASC,oBAAO,6CAAA,7CAACC;;AACjB,GAAA,QAAAJ,kCAAAC,uCAAAI;AAAA;AAAA,AAAA,AAASC,0BAAa,6CAAA,7CAACF;;AAEvB,GAAA,QAAAJ,kCAAAC,uCAAAM;AAAA;AAAA,AAAA,AAASC,mBAAM,6CAAA,2CAAA,yDAAA,2CAAA,yDAAA,aAAA,iEAAA,2CAAA,gEAAA,gBAAA,0DAAA,2CAAA,gEAAA,gBAAA,+DAAA,2CAAA,gEAAA,gBAAA,6DAAA,2CAAA,gEAAA,iBAAA,2DAAA,2CAAA,+DAAA,3oCAACJ;;AAOhB,6BAAA,7BAAMK,kEACHC;AADH,AAEE,OAACC,+CAAO,eAAAC,JAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAUG;QAAV,AAAAF,4CAAAD,WAAA,IAAA,/DAAYI;QAAZJ,JAAkBK;AAAlB,AACE,GAAI,OAASF;AACX,wDAAA,jDAACG,6CAAKJ,uFAAK,AAACK,gDAAQJ,GAAG,AAACK,iBAAOJ;;AAC/B,OAACE,6CAAKJ,IAAIG;;GAHtB,iCAG8BR;;AAEhC,yBAAA,zBAAMY,0DACHC,YAAYC,WAAWC;AAD1B,AAEE,qIAAA,mFAAA,jNAACC,gEACAH,oOACEC,WAAW,2BAAA,sBAAIC,tBACAE,3BACAlB;;AAEpB,2BAAA,3BAAMmB,8DACHC;AADH,AAEE,IAAAC,aAAA,AAAAC,cAAcF;IAAdG,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,IAAAE,aAAA,AAAAH,kDAAAE;QAAA,AAAApB,4CAAAqB,WAAA,IAAA,/DAASU;QAAT,AAAA/B,4CAAAqB,WAAA,IAAA,/DAAWW;AAAX,AAAA,AACE,AAAAC,8DAAA,FAAgBF;;mCAAGG,EAAIvB;AAAvB,AACE;kBAAKD;AAAL,AACE,OAACF,uBAAYwB,EAAEtB,WAAWC;;;;yBAFXuB;IAAIvB;;;;EAAAA;;oCAAJuB,EAAIvB;;;IAAJuB;IAAIvB;0BAAJuB,EAAIvB;;;;;;;;AADzB;AAAA,eAAAK;eAAAE;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAAE,qBAAA,AAAAL,cAAAD;AAAA,AAAA,GAAAM;AAAA,AAAA,IAAAN,iBAAAM;AAAA,AAAA,GAAA,AAAAC,6BAAAP;AAAA,IAAAQ,kBAAA,AAAAC,sBAAAT;AAAA,AAAA,eAAA,AAAAU,qBAAAV;eAAAQ;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,IAAAI,aAAA,AAAAC,gBAAAb;QAAA,AAAAhB,4CAAA4B,WAAA,IAAA,/DAASG;QAAT,AAAA/B,4CAAA4B,WAAA,IAAA,/DAAWI;AAAX,AAAA,AACE,AAAAC,8DAAA,FAAgBF;;mCAAGG,EAAIvB;AAAvB,AACE;kBAAKD;AAAL,AACE,OAACF,uBAAYwB,EAAEtB,WAAWC;;;;yBAFXuB;IAAIvB;;;;EAAAA;;oCAAJuB,EAAIvB;;;IAAJuB;IAAIvB;0BAAJuB,EAAIvB;;;;;;;;AADzB;AAAA,eAAA,AAAAmB,eAAAd;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;AAKF,yBAAA,AAAAmB,zBAACrB,yCAAepB;AAEhB,sCAAA,tCAAM0C,oFACHzB;AADH,AAEE,uCAAA,vCAAC0B,sBAAO3C;;AACR,AAAC4C,mDAAMC,gBAAM7C,iBAAMiB;;AACnB,yBAAA,AAAAwB,zBAACrB,yCAAepB;;AAJlB,OAAAyC,gBAKGzC;;AAEH,sCAAA,tCAAM8C,oFACH7B;AADH,AAEE,AAAC2B,mDAAMC,gBAAM7C,iBAAMiB;;AACnB,yBAAA,AAAAwB,zBAACrB,yCAAepB;;AAHlB,OAAAyC,gBAIGzC;;AAEH,+BAAA,/BAAM+C,sEACHV;AADH,AAEE,GAAM,cAAAW,bAAUX;AAAhB,uIACOrC,/BACDiD,xGACA,uCAAK,iEAAA,eAAA,AAAAR,hFAACS,8CAAMC,9EACPd;;AAJX;;;AAMF,sCAAA,tCAAMe,oFACHC;AADH,AAEE,IAAAzB,qBAAmB,mDAAA,mFAAA,gDAAA,tLAAC2B,+CAAOF;AAA3B,AAAA,oBAAAzB;AAAA,AAAA,cAAAA,VAAW0B;AAAX,AACE,8DAAA,vDAACE,qHACS,+BAAA,KAAA,pCAACC,uBAAYH,kBACb,AAAA,kFAAOD,KACP,AAAA,uFAASA;;AAJrB;;;AAMF,qCAAA,rCAAMK,kFACHzC;AADH,wEAEOA,fACA0C,zDACA,QAAA,iDAAA;;AAEP,8BAAA,9BAAMC,oEACHP,IAAIpC;AADP,AAEE,OAACL,gDAAQ,iBAAAiD,mBAAI,AAACT,oCAAyBC;AAA9B,AAAA,oBAAAQ;AAAAA;;AACI,OAACH,mCAAwBzC;;;;AAExC,0BAAA,1BAAM6C,4DACH7C;AADH,AAEE,OAACd,+CAAO,WAAKI,IAAIG;AAAT,AACE,GACE,cAAAsC,bAAUtC;AAAG,0DAAA,nDAACqD,+CAAOxD,2DAAWyD,eAAKtD;;AADvC,oBAEE,6BAAA,gBAAIA,hBAAEyB,7BAAMY;AAAa,0DAAA,nDAACgB,+CAAOxD,sEAAiByD,eAAKtD;;AAFzD,AAGQ,0DAAA,nDAACqD,+CAAOxD,2DAAWyD,eAAKtD;;;;GAJ1C,2CAAA,uDAAA,iCAAA,kEAAA,yCAM0BO;;AAE5B,gCAAA,hCAAMgD,wEACHjD,WAAWkD;AADd,AAEE,AAACtB,mDAAM9C,wBAAaqE,iBAAOnD;;AAC3B,qGAAA,9FAAC4B,mDAAM9C,wBAAasE,sGAAUpD,WACA,AAAA,sGAAA,AAAA,oFAAIkD,qBAG3BA;;AAET,gCAAA,hCAAMG,wEACHrD,WAAWd;AADd,AAEE,GAAA,GAAQ,AAACoE,uBAAOpE;AAIX,OAACqE,6CAAK,WAAKG;AAAL,AAAQ,OAACT,8BAAmBjD,WAAW0D;GAD7C,AAACH,6CAAK,WAAK/D;AAAL,AAAQ,QAACA,kCAAAA,8CAAAA,dAAEQ,0BAAAA;iIAFfd,9HACF,AAACqE,6CAAK,AAACC,gDAAQC,gBAAMlC;;AAGxB,OAACK,mDAAM9C,wBAAaqE,iBAAOnD;;;AAE/B,iCAAA,jCAAM2D,0EACHtB,IAAIpC;AADP,AAEE,wDAAA,2CAAA,6DAAA,zJAAC2D,oBAAU,AAACzD,sBAAWF,kMACT,AAAA,mFAAO,AAAA,8EAAKoC,MACZ,AAAA,kFAAOA,KACP,AAAA,uFAASA;;AAEzB,0BAAA,1BAAMwB,4DAAcxB,IAAIpC;AAAxB,AACE,GAAU,AAACqD,uBAAOrD;AAAlB;;AAAA,AACE,IAAMD,aAAW,AAAC4C,4BAAiBP,IAAIpC;AAAvC,AACE,AAAC2B,mDAAMjD,kBAAOwE,iBAAOnD;;AACrB,AAAC4B,mDAAMjD,kBAAOmF,gBACP9D,WACA,AAAC2D,+BAAoBtB,IAAIpC;;AAChCD;;;AAEN,8BAAA,9BAAM+D,oEACHC;AADH,AAEE,uDAAA,+IAAKA,7FAEA,6CAAA,IAAA,jDAACC,lDACDC,hDACAtE;;AAEP,kBAAA,lBAAMuE,4CACH9B,IAAI+B;AADP,AAEE,IAAAC,aAAkC,AAACvB,wBAAasB;IAAhDC,iBAAA,AAAAC,4BAAAD;kBAAA,AAAAE,4CAAAF,eAAA,zEAAcnF;YAAd,AAAAqF,4CAAAF,eAAA,nEAA0BpE;IACpBD,aAAW,iBAAA6C,mBAAI,AAACgB,wBAAaxB,IAAIpC;AAAtB,AAAA,oBAAA4C;AAAAA;;AACI,OAACD,4BAAiBP,IAAInD;;;IACrCsC,IAAE,AAAC6B,8BAAmBrD,WAAWd;AAHvC,AAIE,OAAC6E,4BAAiB/D;;AAmCtB,sBAAA,tBAAMwE,oDAAU/E;AAAhB,AACE,yDAGK,AAACN,+CAAO,WAAKI,IAAI+B,hHAMjB4C;AANQ,AACE,GAAM,EAAI,6CAAA,7CAACS,iDAAKrD,QACN,6CAAA,7CAACqD,iDAAKrD;AAAI,mHAAA,5GAAC3B,oDAAKJ,IAAI+B;;AAD9B,GAEM,6CAAA,7CAACqD,iDAAKrD;AAAG,+DAAA,uDAAA,/GAAC3B,oDAAKJ,gEAAsB+B;;AAF3C,AAGY,OAAC3B,6CAAKJ,IAAI+B;;;;oCALhC,AAAA,WAAAoD,5CACA;AADA,AAAE,8BAAAA,iBAAA,SAAA,jDAACjC;GADH,AAAA,WAAAgC;AAAA,AAAE,8BAAAA,iBAAA,KAAA,7CAAChC;GADHhD;;AAWP,AAAA,8BAAA,sCAAAmF,pEAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,0DAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,4DAAA,5DAAMD;AAAN,AAEG,iEAAA,AAAArD,1DAACuD,0EAAkBlG;;;AAFtB,CAAA,4DAAA,5DAAMgG,uEAGFG;AAHJ,AAIG,2BAAA,6OAAKA,fACAC,vHACA,uHAAA,vHAACC,sDAAOD,7JACRE,pBACAZ;;;AARR,CAAA,sDAAA,tDAAMM;;AAAN,AAUA,AAAA,uBAAA,+BAAAF,tDAAMU;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,mDAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAP,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,qDAAA,rDAAMO;AAAN,AACM,0DAAA,AAAA7D,nDAAC8D,mEAAW5G;;;AADlB,CAAA,qDAAA,rDAAM2G,gEAEFE;AAFJ,AAGG,OAACJ,uGACA,AAACK,+CAAOC,mCAGK,AAACnC,6CAAK,WAAAuC;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAxG,4CAAAyG,WAAA,IAAA,/DAAM1E;QAAN,AAAA/B,4CAAAyG,WAAA,IAAA,/DAAQzE;AAAR,AAAY,oDAAA,7CAAC0E,gIAAM3E,UAAGC;6KAF5BkE,1KACA,AAACG,gDAAQ,6CAAA,7CAACC,0GAAeC;;;AAN1C,CAAA,+CAAA,/CAAMP;;AAAN,AASA,wBAAA,xBAAMW;AAAN,AAEE,oDAAK,AAACV,kGACD,AAACP;;AAWR,4BAAA,5BAAMkB,gEACHV,OAAOP;AADV,AAEE,oDAAK,AAACM,mDAAUC,SACX,AAACR,0DAAiBC;;AAEzB","names":["js/stylo","js/stylo.core","js/stylo.core.styles","stylo.core/styles","cljs.core.atom","js/stylo.core.media-styles","stylo.core/media-styles","js/stylo.core.media","stylo.core/media","stylo.core/garden-readable","media-rules","cljs.core.reduce","p__47253","vec__47255","cljs.core.nth","acc","f","s","r","cljs.core.conj","cljs.core.keyword","cljs.core/second","stylo.core/media-query","media-specs","class-name","rules","garden.stylesheet.at_media","stylo.rule/join-rules","stylo.core/defmediarules","media","seq__47270","cljs.core/seq","chunk__47271","count__47272","i__47273","vec__47286","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__47292","cljs.core/first","cljs.core/next","k","v","stylo.rule/rule","_","cljs.core/deref","stylo.core/set-own-mediarules!","cljs.core/reset!","cljs.core.swap_BANG_","cljs.core/merge","stylo.core/extend-media-rules!","stylo.core/media-rule?","cljs.core/Keyword","cljs.core/keys","cljs.core.apply","cljs.core/hash-set","stylo.core/create-located-classname","env","ns-name","cljs.core.get_in","stylo.util.format","clojure.string/replace","stylo.core/create-hashed-classname","cljs.core/hash","stylo.core/create-classname","or__5045__auto__","stylo.core/divide-rules","cljs.core.update","cljs.core/conj","stylo.core/inject-media-rules","garden-obj","cljs.core/dissoc","cljs.core/assoc-in","stylo.core/create-media-rules","cljs.core/empty?","cljs.core.mapv","cljs.core.partial","cljs.core/apply","g","stylo.core/rules-with-location","cljs.core/with-meta","stylo.core/create-rules","cljs.core/assoc","stylo.core/return-classname","classname","cljs.core.drop","clojure.string.join","stylo.core/c-fn","rs","map__47331","cljs.core/--destructure-map","cljs.core.get","stylo.core/prettify","p1__47338#","p1__47339#","cljs.core._EQ_","var_args","G__47347","stylo.core/css-media-styles","js/Error","stylo.core.css_media_styles","media-styles","cljs.core/vals","cljs.core.mapcat","garden.core.css","G__47349","stylo.core/css-rules","stylo.core.css_rules","styles","cljs.core.concat","stylo.tailwind.preflight/preflight","cljs.core.sort_by","cljs.core.comp","cljs.core/meta","p__47351","vec__47352","cljs.core.into","stylo.core/get-styles","stylo.core/compile-styles"],"sourcesContent":["(ns stylo.core\n  (:require\n   [garden.core]\n   [garden.stylesheet]\n   [clojure.string :as str]\n   [stylo.rule :refer [rule join-rules]]\n   [stylo.tailwind.preflight]\n   [stylo.tailwind.accessibility]\n   [stylo.tailwind.background]\n   [stylo.tailwind.border]\n   [stylo.tailwind.effect]\n   [stylo.tailwind.flex]\n   [stylo.tailwind.grid]\n   [stylo.tailwind.interactivity]\n   [stylo.tailwind.layout]\n   [stylo.tailwind.sizing]\n   [stylo.tailwind.spacing]\n   [stylo.tailwind.svg]\n   [stylo.tailwind.table]\n   [stylo.tailwind.transform]\n   [stylo.tailwind.transition]\n   [stylo.tailwind.typography]\n   [stylo.tailwind.variant]\n   [stylo.util :as u])\n  #?(:cljs (:require-macros [stylo.core])))\n\n(defonce styles (atom {}))\n(defonce media-styles (atom {}))\n\n(defonce media (atom {:screen {:screen true}\n                      :smartphone {:max-width \"415px\"}\n                      :ereader {:max-width \"481px\"}\n                      :p-tablets {:max-width \"768px\"}\n                      :l-tablets {:max-width \"1025px\"}\n                      :desktop {:min-width \"1200px\"}}))\n\n(defn garden-readable\n  [media-rules]\n  (reduce (fn [acc [f s :as r]]\n            (if (string? f)\n              (conj acc [(keyword f) (second s)])\n              (conj acc r))) [] media-rules))\n\n(defn media-query\n  [media-specs class-name rules]\n  (garden.stylesheet/at-media\n   media-specs\n   [[class-name (-> rules\n                    join-rules\n                    garden-readable)]]))\n\n(defn defmediarules\n  [media]\n  (doseq [[k v] media]\n    (defmethod rule k [_ & rules]\n      (fn [class-name]\n        (media-query v class-name rules)))))\n\n(defmediarules @media)\n\n(defn set-own-mediarules!\n  [rules]\n  (reset! media {})\n  (swap! merge media rules)\n  (defmediarules @media)\n  @media)\n\n(defn extend-media-rules!\n  [rules]\n  (swap! merge media rules)\n  (defmediarules @media)\n  @media)\n\n(defn media-rule?\n  [k]\n  (when (keyword? k)\n    (-> @media\n        keys\n        (->> (apply hash-set)\n             k))))\n\n(defn create-located-classname\n  [env]\n  (when-let [ns-name (get-in env [:ns :name])]\n    (u/format \".%s-%s-%s\"\n              (str/replace ns-name #\"\\.\" \"_\")\n              (:line env)\n              (:column env))))\n\n(defn create-hashed-classname\n  [rules]\n  (->> rules\n       hash\n       (str \".c\")))\n\n(defn create-classname\n  [env rules]\n  (keyword (or (create-located-classname env)\n               (create-hashed-classname rules))))\n\n(defn divide-rules\n  [rules]\n  (reduce (fn [acc r]\n            (cond\n              (keyword? r) (update acc :rules conj r)\n              (-> r first media-rule?) (update acc :media-rules conj r)\n              :else (update acc :rules conj r)))\n          {:rules []\n           :media-rules []} rules))\n\n(defn inject-media-rules\n  [class-name garden-obj]\n  (swap! media-styles dissoc class-name)\n  (swap! media-styles assoc-in [class-name\n                                (-> garden-obj\n                                    :value\n                                    :media-queries)]\n         garden-obj))\n\n(defn create-media-rules\n  [class-name media-rules]\n  (if-not (empty? media-rules)\n    (->> media-rules\n       (mapv (partial apply rule))\n       (mapv (fn [f] (f class-name)))\n       (mapv (fn [g] (inject-media-rules class-name g))))\n    (swap! media-styles dissoc class-name)))\n\n(defn rules-with-location\n  [env rules]\n  (with-meta (join-rules rules)\n    {:location [(:name (:ns env))\n                (:line env)\n                (:column env)]}))\n\n(defn create-rules [env rules]\n  (when-not (empty? rules)\n    (let [class-name (create-classname env rules)]\n      (swap! styles dissoc class-name)\n      (swap! styles assoc\n             class-name\n             (rules-with-location env rules))\n      class-name)))\n\n(defn return-classname\n  [classname]\n  (->> classname\n       str\n       (drop 2)\n       str/join\n       keyword))\n\n(defn c-fn\n  [env rs]\n  (let [{:keys [media-rules rules]} (divide-rules rs)\n        class-name (or (create-rules env rules)\n                       (create-classname env media-rules))\n        _ (create-media-rules class-name media-rules)]\n    (return-classname class-name)))\n\n(defmacro c\n  [& rules]\n  (c-fn &env rules))\n\n(defmacro c-eco\n  \"Uses only hashed version of classname. Is recomended for release purposes, because it minimizes resulting CSS file.\"\n  [& rules]\n  (c-fn nil rules))\n\n(defmacro c? [& rs]\n  (let [{:keys [rules media-rules]} (divide-rules rs)\n        class-name (if-not (empty? rules)\n                     (create-classname &env rules)\n                     (create-classname &env media-rules))\n\n        compute-rules (fn [r] (->> r\n                                   join-rules\n                                   (into [class-name])\n                                   garden.core/css\n                                   boolean))\n        compute-media-rules (fn [m] (->> m\n                                         (mapv (partial apply rule))\n                                         (mapv (fn [f] (f class-name)))\n                                         garden.core/css\n                                         boolean))]\n    (cond\n      (and (empty? media-rules)\n           (empty? rules)) true\n      (empty? media-rules) (compute-rules rules)\n      (empty? rules) (compute-media-rules media-rules)\n      :else (and (compute-rules rules)\n                 (compute-media-rules media-rules)))))\n\n(defn prettify [s]\n  (->> s\n       (#(str/replace % #\"\\n\" \"\"))\n       (#(str/replace % #\"\\s{2,}\" \" \"))\n       (reduce (fn [acc v]\n                 (cond (or (= \\{ v)\n                           (= \\} v)) (conj acc v \\newline)\n                       (= \\@ v) (conj acc \\newline \\newline v)\n                       :else (conj acc v)))\n               [])\n       str/join))\n\n(defn css-media-styles\n  ([]\n   (css-media-styles @media-styles))\n  ([media-styles]\n   (->> media-styles\n        vals\n        (mapcat vals)\n        garden.core/css\n        prettify)))\n\n(defn css-rules\n  ([] (css-rules @styles))\n  ([styles]\n   (garden.core/css\n    (concat stylo.tailwind.preflight/preflight\n            (->> styles\n                 (sort-by (comp :location meta))\n                 (mapv (fn [[k v]] (into [k] v))))))))\n\n(defn get-styles\n  []\n  (str (css-rules)\n       (css-media-styles)))\n\n(defmacro mount-style\n  []\n  `(aset (or (.getElementById js/document \"stylo\")\n             (let [style# (.createElement js/document \"style\")]\n               (.setAttribute style# \"id\" \"stylo\")\n               (.appendChild js/document.head style#)\n               style#))\n         \"innerHTML\" ~(get-styles)))\n\n(defn compile-styles\n  [styles media-styles]\n  (str (css-rules styles)\n       (css-media-styles media-styles)))\n\n(comment\n  (reset! styles {})\n  (reset! media-styles {})\n  @styles\n  @media-styles\n  (get-styles)\n  (c? [:text :blue-300] [:smartphone [:text :blue-500]])\n  (c? [:smartphone [:text :blue-500] {:font-weight \"500\"}]\n      [:screen [:text :pink-200] {:font-weight \"300\"}])\n  (c? [:smartphone [:bg :red-500] [[:.some-arbitrary-class {:bg :blue-400}]]])\n  (c? [:progress-bar [:bg :red-500]] {:font-weight \"500\"})\n  (c? [:progress-bar [:bg :red-500]])\n  (c? [:disabled [:hover [:bg :red-500]]])\n  (c? [:bg :red-500] [[:.some-arbitrary-class {:bg :blue-400}]])\n  (c? [:bg :red-500]\n      [:hover [[:.some-arbitrary-class {:bg :blue-400}]]])\n  (c? [:pseudo \":nth-child(2)\" [:hover [:bg :red-500]]])\n  (c? [[:& {:color \"red\"}]\n       [:&:target {:color \"green\"}]])\n  (c? {:color \"red\"})\n  (c? [:hover [:placeholder :white] [:mb 1]])\n  (c? [:p 1])\n  (c? [:placeholder :white])\n  (c? [:divide-x 2])\n  (c? :sr-only))\n"]}