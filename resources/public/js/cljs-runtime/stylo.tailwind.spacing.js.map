{"version":3,"sources":["stylo/tailwind/spacing.cljc"],"mappings":"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","names":["stylo.tailwind.spacing/padding","x","stylo.util.as_unit","stylo.rule.defrules","stylo.rule/rule","_","y","stylo.tailwind.spacing/margin","stylo.util.format","garden.compiler/render-css"],"sourcesContent":["(ns stylo.tailwind.spacing\n  (:require\n   [stylo.rule :refer [rule defrules]]\n   [stylo.util :refer [as-unit] :as util]\n   [garden.compiler :refer [render-css]]))\n\n\n;; https://tailwindcss.com/docs/padding/#app\n\n(def padding {:p (fn [x] {:padding (as-unit x)})\n              :p-auto  {:padding \"auto\"}\n              :p-px  {:padding (as-unit 1 :px)}\n\n              :px  (fn [x] {:padding-left (as-unit x) :padding-right (as-unit x)})\n              :px-auto  {:padding-left \"auto\" :padding-right \"auto\"}\n              :px-px  {:padding-left (as-unit 1 :px) :padding-right (as-unit 1 :px)}\n\n              :py  (fn [x] {:padding-top (as-unit x) :padding-bottom (as-unit x)})\n              :py-auto  {:padding-top \"auto\" :padding-bottom \"auto\"}\n              :py-px  {:padding-top (as-unit 1 :px) :padding-bottom (as-unit 1 :px)}\n\n              :pt  (fn [x] {:padding-top (as-unit x)})\n              :pt-auto  {:padding-top \"auto\"}\n              :pt-px  {:padding-top (as-unit 1 :px)}\n\n              :pl  (fn [x] {:padding-left (as-unit x)})\n              :pl-auto  {:padding-left \"auto\"}\n              :pl-px  {:padding-left (as-unit 1 :px)}\n\n              :pb  (fn [x] {:padding-bottom (as-unit x)})\n              :pb-auto  {:padding-bottom \"auto\"}\n              :pb-px  {:padding-bottom (as-unit 1 :px)}\n\n              :pr  (fn [x] {:padding-right (as-unit x)})\n              :pr-auto  {:padding-right \"auto\"}\n              :pr-px  {:padding-right (as-unit 1 :px)}})\n\n(defrules padding)\n\n(defmethod rule :pyx [_  y x]\n  [[:& {:padding-top    (as-unit y)\n        :padding-bottom (as-unit y)\n        :padding-left   (as-unit x)\n        :padding-right  (as-unit x)}]])\n\n;; https://tailwindcss.com/docs/margin/#app\n(def margin {:m  (fn [x] {:margin (as-unit x)})\n             :m-auto  {:margin \"auto\"}\n             :m-px  {:margin (as-unit 1 :px)}\n\n             :mx  (fn [x] {:margin-left (as-unit x) :margin-right (as-unit x)})\n             :mx-auto  {:margin-left \"auto\" :margin-right \"auto\"}\n             :mx-px  (fn [x] {:margin-left (as-unit 1 :px) :margin-right (as-unit 1 :px)})\n             :my  (fn [x] {:margin-top (as-unit x) :margin-bottom (as-unit x)})\n             :my-auto  {:margin-top \"auto\" :margin-bottom \"auto\"}\n             :my-px  {:margin-top (as-unit 1 :px) :margin-bottom (as-unit 1 :px)}\n\n             :mt  (fn [x] {:margin-top (as-unit x)})\n             :mt-auto  {:margin-top \"auto\"}\n             :mt-px  {:margin-top (as-unit 1 :px)}\n\n             :ml  (fn [x] {:margin-left (as-unit x)})\n             :ml-auto  {:margin-left \"auto\"}\n             :ml-px  {:margin-left (as-unit 1 :px)}\n\n             :mb  (fn [x] {:margin-bottom (as-unit x)})\n             :mb-auto  {:margin-bottom \"auto\"}\n             :mb-px  {:margin-bottom (as-unit 1 :px)}\n\n             :mr  (fn [x] {:margin-right (as-unit x)})\n             :mr-auto  {:margin-right \"auto\"}\n             :mr-px  {:margin-right (as-unit 1 :px)}})\n\n(defrules margin)\n;; https://tailwindcss.com/docs/space/#app\n\n(defmethod rule :space-x\n  ([_] (rule :space-x 1))\n  ([_ x] [[\"&>*+*\" {:--space-x-reverse 0\n                    :margin-right      (util/format \"calc(%s * var(--space-x-reverse))\" (render-css (as-unit x)))\n                    :margin-left       (util/format \"calc(%s * calc(1 - var(--space-x-reverse)))\" (render-css (as-unit x)))}]]))\n\n(defmethod rule :space-y\n  ([_] (rule :space-y 1))\n  ([_ x] [[\"&>*+*\" {:--space-y-reverse 0\n                    :margin-bottom     (util/format \"calc(%s * var(--space-y-reverse))\" (render-css (as-unit x)))\n                    :margin-top        (util/format \"calc(%s * calc(1 - var(--space-y-reverse)))\" (render-css (as-unit x)))}]]))\n\n(defmethod rule :space-x-reverse [_] [[\"&>*+*\" {:--space-x-reverse 1}]])\n(defmethod rule :space-y-reverse [_] [[\"&>*+*\" {:--space-y-reverse 1}]])\n\n(defmethod rule :myx [_ y x]\n  [[:& {:margin-left   (as-unit x)\n        :margin-right  (as-unit x)\n        :margin-top    (as-unit y)\n        :margin-bottom (as-unit y)}]])\n"]}