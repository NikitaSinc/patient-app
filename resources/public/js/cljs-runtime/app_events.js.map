{"version":3,"sources":["app_events.cljs"],"mappings":"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","names":["app-events/app-state","re_frame.core.reg_event_db","_","re_frame.core.reg_event_fx","p__45959","p__45960","map__45961","cljs.core/--destructure-map","cljs.core.get","vec__45962","cljs.core.nth","db","val","cljs.core.assoc","ajax.core/json-request-format","ajax.core/json-response-format","p__45965","map__45966","p__45967","p__45968","map__45969","vec__45970","p__45973","p__45974","map__45975","vec__45976","app-events/cljsfy-vec","in","out","cljs.core.js__GT_clj","p1__45979#","cljs.core.mapv","cljs.core.update","old","js/Date","app-events/cljsfy","cljs.core/first","app-events/cljsfy-single-patient","p__45980","vec__45981","error","p__45984","vec__45985","response","cljs.core/conj","p__45988","vec__45989","p__45993","vec__45994","cljs.core/vec","p1__45992#","cljs.core.remove","cljs.core._EQ_","p__45998","vec__45999","resp","p1__45997#","cljs.core.map","p__46002","vec__46003","p__46006","vec__46007","re_frame.core.reg_sub","p__46010","vec__46011","cofx","patient","re_frame.core.subscribe","p__46014","vec__46015","valid","cljs.core.update_in","re-frame.core/reg-fx","fio","cljs.core/count","re-frame.core/dispatch","temp__5802__auto__","cljs.core/re-matches","p__46018","vec__46019","p__46022","vec__46023","oms","p__46026","vec__46027","p__46030","vec__46031","gender","p__46034","vec__46035","p__46038","vec__46039","dob","p__46042","vec__46043","p__46046","vec__46047","address","p__46050","vec__46051"],"sourcesContent":["(ns app-events\n  (:require       [day8.re-frame.http-fx]\n                  [reagent.core :as r]\n                  [re-frame.core :as rf]\n                  [ajax.core :as ajax]))\n\n(def app-state {})\n\n(rf/reg-event-db\n  :init-default-db\n  (fn [_ _]\n    {:patients []\n     :patient-change nil\n     :new-patient {:patients/fio nil\n                   :patients/oms nil\n                   :patients/gender \"male\"\n                   :patients/dob nil\n                   :patients/address nil}\n     :new-patient-is-valid {:oms-valid false\n                            :fio-valid false\n                            :gender-valid false\n                            :dob-valid false\n                            :address-valid false}\n     :selected-patient nil\n     :beckend-uri \"http://localhost:8080/\"\n     :error nil}))\n\n;----------------------------------------------------------------------------http events\n\n(rf/reg-event-fx\n  :add-patients\n  (fn [{db :db} [_ val]]\n    {:http-xhrio {:method           :post\n                  :uri              (str (:beckend-uri db) \"patients/create\")\n                  :params           (assoc val :oms (:patient-change db))\n                  :format           (ajax/json-request-format)\n                  :response-format  (ajax/json-response-format {:keywords? true})\n                  :on-success       [:success-add-patients]\n                  :on-failure       [:failure-http-response]}\n     :fx [[:dispatch [:clear-new-patient]]]}))\n\n(rf/reg-event-fx\n  :get-patients\n  (fn [{db :db} _]\n    {:http-xhrio {:method           :get\n                  :uri              (str (:beckend-uri db) \"patients/get-all\")\n                  :response-format  (ajax/json-response-format {:keywords? true})\n                  :on-success       [:success-get-patients]\n                  :on-failure       [:failure-http-response]}}))\n\n(rf/reg-event-fx\n  :delete-patients\n  (fn [{db :db} [_ val]]\n    {:http-xhrio {:method           :delete\n                  :uri              (str (:beckend-uri db) \"patients/\"val\"/delete\")\n                  :format           (ajax/json-request-format)\n                  :response-format  (ajax/json-response-format {:keywords? true})\n                  :on-success       [:success-delete-patients]\n                  :on-failure       [:failure-http-response]}}))\n\n(rf/reg-event-fx\n  :update-patients\n  (fn [{db :db} [_ val]]\n    {:http-xhrio {:method           :post\n                  :uri              (str (:beckend-uri db) \"patients/\"(:patients/oms val)\"/update\")\n                  :response-format  (ajax/json-response-format {:keywords? true})\n                  :format           (ajax/json-request-format)\n                  :params           val\n                  :on-success       [:success-update-patients]\n                  :on-failure       [:failure-http-response]}\n     :fx [[:dispatch [:clear-new-patient]]\n          [:dispatch [:patient-change-nil]]]}))\n\n(defn cljsfy-vec [in]\n  (let [out (js->clj in :keywordize-keys true)]\n    (mapv #(update % :patients/dob (fn [old] (js/Date. old))) out)))\n\n(defn cljsfy [in]\n  (first (js->clj in :keywordize-keys true)))\n\n(defn cljsfy-single-patient [in]\n (update (cljsfy in) :patients/dob (fn [old] (js/Date. old))))\n\n(rf/reg-event-db\n  :set-error\n  (fn [db [_ error]]\n    (assoc db :error error)))\n\n(rf/reg-event-db\n  :success-add-patients\n  (fn [db [_ response]]\n    (update db :patients conj (cljsfy-single-patient response))))\n\n(rf/reg-event-db\n  :clear-new-patient\n  (fn [db [_ response]]\n    (assoc db :new-patient {:patients/fio nil\n                            :patients/oms nil\n                            :patients/gender \"male\"\n                            :patients/dob nil\n                            :patients/address nil})))\n\n(rf/reg-event-db\n  :success-delete-patients\n  (fn [db [_ response]]\n  (update db :patients (fn [old]\n                         (vec\n                           (remove\n                             #(=\n                                (:patients/oms %)\n                                (:patients/oms (cljsfy response))) old))))))\n\n(rf/reg-event-db\n  :success-update-patients\n  (fn [db [_ response]]\n    (let [resp (cljsfy-single-patient response)]\n    (update db :patients (fn [old]\n                           (map #(if (= (:patients/oms resp) (:patients/oms %))\n                                        resp\n                                        %) old))))))\n\n(rf/reg-event-db\n  :failure-http-response\n  (fn [db [_ response]]\n    (assoc db :error response)))\n\n(rf/reg-event-db\n  :success-get-patients\n  (fn [db [_ response]]\n    (assoc db :patients (cljsfy-vec response))))\n\n;-------------------------------------------------------------------------------main view events\n(rf/reg-sub\n  :patient-change\n  (fn [db _]\n    (:patient-change db)))\n\n(rf/reg-event-db\n  :patient-change-nil\n  (fn [db _]\n    (assoc db :patient-change nil)))\n\n(rf/reg-event-fx\n  :patient-change-set\n  (fn [cofx [_ patient]]\n    {:db (assoc (:db cofx) :patient-change (:patients/oms patient))\n     :fx [[:dispatch [:new-patient-fio-update (.trim (:patients/fio patient))]]\n          [:dispatch [:new-patient-oms-update (.trim (:patients/oms patient))]]\n          [:dispatch [:new-patient-gender-update (:patients/gender patient)]]\n          [:dispatch [:new-patient-address-update (.trim (:patients/address patient))]]\n          [:dispatch [:new-patient-dob-update (:patients/dob patient)]]]}))\n\n(rf/reg-sub\n  :patients\n  (fn [db _]\n    (:patients db)))\n\n(rf/reg-sub\n  :error\n  (fn [db _]\n    (:error db)))\n\n(rf/reg-sub\n  :new-patient\n  (fn [db _]\n    (:new-patient db)))\n\n(rf/reg-sub\n  :new-patient-is-valid\n  (fn [db _]\n    (:new-patient-is-valid db)))\n\n;-------------------------------------------------------------------------------fio input events\n(rf/reg-sub\n  :new-patient-fio\n  (fn [_ _]\n    (rf/subscribe [:new-patient]))\n  (fn [patient _]\n    (:patients/fio patient)))\n\n(rf/reg-event-db\n  :new-patient-fio-valid\n  (fn [db [_ valid]]\n    (update-in db [:new-patient-is-valid :fio-valid] (fn [old] valid))))\n\n(rf/reg-fx\n  :new-patient-fio-validation\n  (fn [fio]\n    (if (= 0 (count fio))\n      (do (rf/dispatch [:set-error nil])\n          (rf/dispatch [:new-patient-fio-valid false]))\n      (if (> (count fio) 200)\n        (rf/dispatch [:set-error \"To many characters in field FIO\"])\n        (if-let [valid (re-matches #\"[\u0430-\u044f\u0410-\u042fA-Za-z \\-\\(\\)]+\" fio)]\n          (do (rf/dispatch [:new-patient-fio-valid true])\n              (rf/dispatch [:set-error nil]))\n          (do (rf/dispatch [:new-patient-fio-valid false])\n              (rf/dispatch [:set-error \"Unacceptable chracters in field FIO\"])))))))\n\n(rf/reg-event-fx\n  :new-patient-fio-update\n  (fn [cofx [_ fio]]\n     {:db (update-in (:db cofx) [:new-patient :patients/fio] (fn [old] fio))\n      :fx [[:new-patient-fio-validation fio]]}))\n\n;-------------------------------------------------------------------------------oms input events\n(rf/reg-sub\n  :new-patient-oms\n  (fn [_]\n    (rf/subscribe [:new-patient]))\n  (fn [patient _]\n    (:patients/oms patient)))\n\n(rf/reg-event-db\n  :new-patient-oms-valid\n  (fn [db [_ valid]]\n    (update-in db [:new-patient-is-valid :oms-valid] (fn [old] valid))))\n\n(rf/reg-fx\n  :new-patient-oms-validation\n  (fn [oms]\n    (if (= 0 (count oms))\n      (do (rf/dispatch [:set-error nil])\n          (rf/dispatch [:new-patient-oms-valid false]))\n      (if (> (count oms) 16)\n        (rf/dispatch [:set-error \"To many characters in field OMS\"])\n        (if-let [valid (re-matches #\"[0-9]+\" oms)]\n          (do (rf/dispatch [:new-patient-oms-valid true])\n              (rf/dispatch [:set-error nil]))\n          (do (rf/dispatch [:new-patient-oms-valid false])\n              (rf/dispatch [:set-error \"Unacceptable chracters in field OMS\"])))))))\n\n(rf/reg-event-fx\n  :new-patient-oms-update\n  (fn [cofx [_ oms]]\n     {:db (update-in (:db cofx) [:new-patient :patients/oms] (fn [old] oms))\n      :fx [[:new-patient-oms-validation oms]]}))\n\n;------------------------------------------------------------------------------gender input events\n(rf/reg-sub\n  :new-patient-gender\n  (fn [_]\n    (rf/subscribe [:new-patient]))\n  (fn [patient _]\n    (:patients/gender patient)))\n\n(rf/reg-event-db\n  :new-patient-gender-valid\n  (fn [db [_ valid]]\n    (update-in db [:new-patient-is-valid :gender-valid] (fn [old] valid))))\n\n(rf/reg-fx\n  :new-patient-gender-validation\n  (fn [gender]\n    (if (not (nil? gender))\n      (rf/dispatch [:new-patient-gender-valid true])\n      (rf/dispatch [:new-patient-gender-valid false]))))\n\n(rf/reg-event-fx\n  :new-patient-gender-update\n  (fn [cofx [_ gender]]\n     {:db (update-in (:db cofx) [:new-patient :patients/gender] (fn [old] gender))\n      :fx [[:new-patient-gender-validation gender]]}))\n\n;--------------------------------------------------------------------------------dob input events\n(rf/reg-sub\n  :new-patient-dob\n  (fn [_]\n    (rf/subscribe [:new-patient]))\n  (fn [patient _]\n    (:patients/dob patient)))\n\n(rf/reg-event-db\n  :new-patient-dob-valid\n  (fn [db [_ valid]]\n    (update-in db [:new-patient-is-valid :dob-valid] (fn [old] valid))))\n\n(rf/reg-fx\n  :new-patient-dob-validation\n  (fn [dob]\n    (if (nil? dob)\n      (do (rf/dispatch [:new-patient-dob-valid false])\n          (rf/dispatch [:set-error nil]))\n      (if (<= (js/Date. dob) (js/Date.))\n      (do (rf/dispatch [:new-patient-dob-valid true])\n          (rf/dispatch [:set-error nil]))\n      (do (rf/dispatch [:new-patient-dob-valid false])\n          (rf/dispatch [:set-error \"Go back to the future!\"]))))))\n\n(rf/reg-event-fx\n  :new-patient-dob-update\n  (fn [cofx [_ dob]]\n     {:db (update-in (:db cofx) [:new-patient :patients/dob] (fn [old] dob))\n      :fx [[:new-patient-dob-validation dob]]}))\n\n;--------------------------------------------------------------------------------address input events\n(rf/reg-sub\n  :new-patient-address\n  (fn [_]\n    (rf/subscribe [:new-patient]))\n  (fn [patient _]\n    (:patients/address patient)))\n\n(rf/reg-event-db\n  :new-patient-address-valid\n  (fn [db [_ valid]]\n    (update-in db [:new-patient-is-valid :address-valid] (fn [old] valid))))\n\n(rf/reg-fx\n  :new-patient-address-validation\n  (fn [address]\n    (if (= 0 (count address))\n      (do (rf/dispatch [:set-error nil])\n          (rf/dispatch [:new-patient-address-valid false]))\n      (if (> (count address) 200)\n        (rf/dispatch [:set-error \"To many characters in field Address\"])\n        (if-let [valid (re-matches #\"[a-zA-Z\u0430-\u044f\u0410-\u042f0-9 \\-\\.]+\" address)]\n          (do (rf/dispatch [:new-patient-address-valid true])\n              (rf/dispatch [:set-error nil]))\n          (do (rf/dispatch [:new-patient-address-valid false])\n              (rf/dispatch [:set-error \"Unacceptable chracters in field Address\"])))))))\n\n(rf/reg-event-fx\n  :new-patient-address-update\n  (fn [cofx [_ address]]\n     {:db (update-in (:db cofx) [:new-patient :patients/address] (fn [old] address))\n      :fx [[:new-patient-address-validation address]]}))\n"]}