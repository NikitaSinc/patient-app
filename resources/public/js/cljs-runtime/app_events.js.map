{"version":3,"sources":["app_events.cljs"],"mappings":";AAMA,AAAKA,uBAAU,gDAAA,2CAAA,4DAAA,iCAAA,oEAAA,2CAAA,iEAAA,OAAA,kEAAA,KAAA,uEAAA,KAAA,kEAAA,KAAA,0EAAA,aAAA,sFAAA,2CAAA,8DAAA,MAAA,+DAAA,MAAA,oEAAA,MAAA,8DAAA,MAAA,wEAAA,cAAA,4EAAA,KAAA,oEAAA,yBAAA,uDAAA,n3CAACC;AAehB,yDAAA,zDAACC,6HAEC,WAAAC,SAAcK;AAAd,AAAA,IAAAJ,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAMG;AAAN,AAAA,kDAAA,iEAAA,2CAAA,uDAAA,oDAAA,sQAAA,iOAAA,iEAAA,mFAAA,4FAAA,gEAAA,mFAAA,vzBAEkC,uLAAA,1IAAK,AAAA,kGAAA,AAAAE,gBAAeT,+HACpB,+BAAA,2CAAA,8DAAA,xIAACU;;AAIrC,yDAAA,zDAACR,+HAEC,WAAAS,SAAcH;AAAd,AAAA,IAAAI,aAAAD;IAAAC,iBAAA,AAAAP,4BAAAO;SAAA,AAAAN,4CAAAM,eAAA,hEAAML;AAAN,AAAA,kDAAA,iEAAA,2CAAA,uDAAA,mDAAA,uQAAA,iOAAA,iEAAA,mFAAA,6FAAA,gEAAA,mFAAA,zzBAEkC,uLAAA,1IAAK,AAAA,kGAAA,AAAAE,gBAAeT,gIACpB,+BAAA,2CAAA,8DAAA,xIAACU;;AAIrC,yDAAA,zDAACR,qIAEC,WAAAW,SAAcL;AAAd,AAAA,IAAAM,aAAAD;IAAAC,iBAAA,AAAAT,4BAAAS;SAAA,AAAAR,4CAAAQ,eAAA,hEAAMP;AAAN,AAAA,kDAAA,iEAAA,2CAAA,uDAAA,mDAAA,uQAAA,iOAAA,iEAAA,mFAAA,6FAAA,gEAAA,mFAAA,zzBAEkC,uLAAA,1IAAK,AAAA,kGAAA,AAAAE,gBAAeT,gIACpB,+BAAA,2CAAA,8DAAA,xIAACU;;AAIrC,yDAAA,zDAACR,mIAEC,WAAAa,SAAcP;AAAd,AAAA,IAAAQ,aAAAD;IAAAC,iBAAA,AAAAX,4BAAAW;SAAA,AAAAV,4CAAAU,eAAA,hEAAMT;AAAN,AAAA,kDAAA,iEAAA,2CAAA,uDAAA,mDAAA,uQAAA,iOAAA,iEAAA,mFAAA,6FAAA,gEAAA,mFAAA,zzBAEkC,uLAAA,1IAAK,AAAA,kGAAA,AAAAE,gBAAeT,gIACpB,+BAAA,2CAAA,8DAAA,xIAACU;;AAIrC,wBAAA,xBAAMO,wDAAYC;AAAlB,AACE,IAAMC,MAAI,gHAAA,2EAAA,3LAACC,0DAAQF;AAAnB,AACE,oDAAA,WAAAG,xDAACC;AAAD,AAAO,sDAAAD,iBAAA,hEAACE,kIAAuB,WAAKC;AAAL,AAAU,YAAAC,KAAUD;;GAAOL;;AAE9D,yDAAA,zDAACO,wHAEC,cAAAC,HAAKpB;AAAL,AAAA,IAAAqB,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASpB;YAAT,AAAAqB,4CAAAD,WAAA,IAAA,nEAAWE;AAAX,AACE,wDAAA,jDAACC,8CAAMxB,0DAAUuB;;AAErB,yDAAA,zDAACJ,6IAEC,cAAAM,HAAKzB;AAAL,AAAA,IAAA0B,aAAAD;QAAA,AAAAH,4CAAAI,WAAA,IAAA,/DAASzB;eAAT,AAAAqB,4CAAAI,WAAA,IAAA,tEAAWC;AAAX,AACE,yDAAA,lDAACX,+CAAOhB,+DAAa,AAAC4B,6CAAK,AAAClB,sBAAWiB;;AAE3C,yDAAA,zDAACR,+IAEC,cAAAU,HAAK7B;AAAL,AAAA,IAAA8B,aAAAD;QAAA,AAAAP,4CAAAQ,WAAA,IAAA,/DAAS7B;eAAT,AAAAqB,4CAAAQ,WAAA,IAAA,tEAAWH;AAAX,AACE,wDAAA,jDAACH,8CAAMxB,0DAAU2B;;AAErB,yDAAA,zDAACR,8IAEC,cAAAY,HAAK/B;AAAL,AAAA,IAAAgC,aAAAD;QAAA,AAAAT,4CAAAU,WAAA,IAAA,/DAAS/B;eAAT,AAAAqB,4CAAAU,WAAA,IAAA,tEAAWL;AAAX,AACE,wDAAA,jDAACH,8CAAMxB,+DAAa,AAACU,sBAAWiB;;AAGpC,2DAAA,3DAACM,iLAEC,WAAKjC,GAAGC;AAAR,AACE,OAAA,kGAAcD;;AAElB,2DAAA,3DAACiC,uLAEC,WAAKhC,EAAEA;AAAP,AACE,6DAAA,mFAAA,zIAACiC;GACH,WAAKC,QAAQlC;AAAb,AACE,OAAA,+FAAekC;;AAEnB,yDAAA,zDAAChB,gJAEC,cAAAiB,HAAKpC;AAAL,AAAA,IAAAqC,aAAAD;QAAA,AAAAd,4CAAAe,WAAA,IAAA,/DAASpC;YAAT,AAAAqB,4CAAAe,WAAA,IAAA,nEAAWC;AAAX,AACE,4DAAA,mFAAA,sFAAA,9NAACC,kDAAUvC,mPAAsC,WAAKiB;AAAL,AAAUqB;;;AAE/D,qBAAA,rBAACE,sHAEC,WAAKC;AAAL,AACE,GAAI,6CAAA,7CAACC,iDAAI,AAACC,gBAAMF;AACd,AAAI,uBAAA,mFAAA,+DAAA,zKAACG;;AACD,8BAAA,mFAAA,uFAAA,jMAACA;;AACL,GAAI,wBAAA,vBAAG,AAACD,gBAAMF;AACZ,8BAAA,mFAAA,+DAAA,zKAACG;;AACD,IAAAC,qBAAe,qBAAA,rBAACC,8CAAqCL;AAArD,AAAA,oBAAAI;AAAA,YAAAA,RAASP;AAAT,AACE,AAAI,uBAAA,mFAAA,uFAAA,jMAACM;;AACD,8BAAA,mFAAA,+DAAA,zKAACA;;AACL,AAAI,uBAAA,mFAAA,uFAAA,jMAACA;;AACD,8BAAA,mFAAA,+DAAA,zKAACA;;;;;AAEf,yDAAA,zDAACjD,iJAEC,gBAAAoD,LAAKE;AAAL,AAAA,IAAAD,aAAAD;QAAA,AAAAzB,4CAAA0B,WAAA,IAAA,/DAAW/C;UAAX,AAAAqB,4CAAA0B,WAAA,IAAA,jEAAaP;AAAb,AAAA,kDAAA,gDACQ,sIAAA,mFAAA,oEAAA,7RAACF,kDAAU,AAAA,8EAAKU,sOAAmC,WAAKhC;AAAL,AAAUwB;IADrE,kDAAA,mFAAA,mFAAA,iGAEsCA;;AAGxC,2DAAA,3DAACR,yLAEC,WAAKhC;AAAL,AACE,6DAAA,mFAAA,zIAACiC;GACH,WAAKC,QAAQlC;AAAb,AACE,OAAA,gGAAekC;;AAEnB,yDAAA,zDAAChB,gJAEC,cAAA+B,HAAKlD;AAAL,AAAA,IAAAmD,aAAAD;QAAA,AAAA5B,4CAAA6B,WAAA,IAAA,/DAASlD;YAAT,AAAAqB,4CAAA6B,WAAA,IAAA,nEAAWb;AAAX,AACE,4DAAA,mFAAA,sFAAA,9NAACC,kDAAUvC,mPAAsC,WAAKiB;AAAL,AAAUqB;;;AAE/D,qBAAA,rBAACE,sHAEC,WAAKY;AAAL,AACE,GAAI,6CAAA,7CAACV,iDAAI,AAACC,gBAAMS;AACd,AAAI,uBAAA,mFAAA,+DAAA,zKAACR;;AACD,8BAAA,mFAAA,wFAAA,lMAACA;;AACL,GAAI,wBAAA,vBAAG,AAACD,gBAAMS;AACZ,8BAAA,mFAAA,+DAAA,zKAACR;;AACD,IAAAC,qBAAe,qBAAA,rBAACC,8BAAqBM;AAArC,AAAA,oBAAAP;AAAA,YAAAA,RAASP;AAAT,AACE,AAAI,uBAAA,mFAAA,uFAAA,jMAACM;;AACD,8BAAA,mFAAA,+DAAA,zKAACA;;AACL,AAAI,uBAAA,mFAAA,uFAAA,jMAACA;;AACD,8BAAA,mFAAA,+DAAA,zKAACA;;;;;AAEf,yDAAA,zDAACjD,iJAEC,gBAAA0D,LAAKJ;AAAL,AAAA,IAAAK,aAAAD;QAAA,AAAA/B,4CAAAgC,WAAA,IAAA,/DAAWrD;UAAX,AAAAqB,4CAAAgC,WAAA,IAAA,jEAAaF;AAAb,AAAA,kDAAA,gDACQ,sIAAA,mFAAA,oEAAA,7RAACb,kDAAU,AAAA,8EAAKU,uOAAmC,WAAKhC;AAAL,AAAUmC;IADrE,kDAAA,mFAAA,mFAAA,iGAEsCA;;AAGxC,2DAAA,3DAACnB,+LAEC,WAAKhC;AAAL,AACE,6DAAA,mFAAA,zIAACiC;GACH,WAAKC,QAAQlC;AAAb,AACE,OAAA,qGAAkBkC;;AAEtB,yDAAA,zDAAChB,sJAEC,cAAAoC,HAAKvD;AAAL,AAAA,IAAAwD,aAAAD;QAAA,AAAAjC,4CAAAkC,WAAA,IAAA,/DAASvD;YAAT,AAAAqB,4CAAAkC,WAAA,IAAA,nEAAWlB;AAAX,AACE,4DAAA,mFAAA,sFAAA,9NAACC,kDAAUvC,wPAAyC,WAAKiB;AAAL,AAAUqB;;;AAElE,qBAAA,rBAACE,4HAEC,WAAKiB;AAAL,AACE,GAAI,GAAK,WAAA,VAAMA;AACb,8BAAA,mFAAA,sFAAA,hMAACb;;AACD,8BAAA,mFAAA,sFAAA,hMAACA;;;AAEP,yDAAA,zDAACjD,wJAEC,gBAAA+D,LAAKT;AAAL,AAAA,IAAAU,aAAAD;QAAA,AAAApC,4CAAAqC,WAAA,IAAA,/DAAW1D;aAAX,AAAAqB,4CAAAqC,WAAA,IAAA,pEAAaF;AAAb,AAAA,kDAAA,gDACQ,sIAAA,mFAAA,oEAAA,7RAAClB,kDAAU,AAAA,8EAAKU,4OAAsC,WAAKhC;AAAL,AAAUwC;IADxE,kDAAA,mFAAA,mFAAA,uGAEyCA","names":["app-events/app-state","reagent.core.atom","re_frame.core.reg_event_fx","p__41693","map__41694","cljs.core/--destructure-map","cljs.core.get","db","_","cljs.core/deref","ajax.core/json-response-format","p__41695","map__41696","p__41697","map__41698","p__41699","map__41700","app-events/cljsfy-vec","in","out","cljs.core.js__GT_clj","p1__41701#","cljs.core.mapv","cljs.core.update","old","js/Date","re_frame.core.reg_event_db","p__41702","vec__41703","cljs.core.nth","error","cljs.core.assoc","p__41706","vec__41707","response","cljs.core.conj","p__41710","vec__41711","p__41714","vec__41715","re_frame.core.reg_sub","re_frame.core.subscribe","patient","p__41718","vec__41719","valid","cljs.core.update_in","re-frame.core/reg-fx","fio","cljs.core._EQ_","cljs.core/count","re-frame.core/dispatch","temp__5802__auto__","cljs.core/re-matches","p__41722","vec__41723","cofx","p__41726","vec__41727","oms","p__41730","vec__41731","p__41734","vec__41735","gender","p__41738","vec__41739"],"sourcesContent":["(ns app-events\n  (:require       [day8.re-frame.http-fx]\n                  [reagent.core :as r]\n                  [re-frame.core :as rf]\n                  [ajax.core :as ajax]))\n\n(def app-state (r/atom {:patients []\n                        :new-patient {:patients/fio \"test\"\n                                      :patients/oms nil\n                                      :patients/gender nil\n                                      :patients/dob nil\n                                      :patients/address nil}\n                        :new-patient-is-valid {:all-valid false\n                                               :fio-valid false\n                                               :gender-valid false\n                                               :dob-valid false\n                                               :address-valid false}\n                        :selected-patient nil\n                        :beckend-uri \"http://localhost:8080/\"\n                        :error nil}))\n\n(rf/reg-event-fx\n  :add-patients\n  (fn [{db :db} _]\n    {:http-xhrio {:method           :post\n                  :uri              (str (:beckend-uri @app-state) \"patients/create\")\n                  :response-format  (ajax/json-response-format {:keywords? true})\n                  :on-success       [:success-add-patients]\n                  :on-failure       [:failure-http-response]}}))\n\n(rf/reg-event-fx\n  :get-patients\n  (fn [{db :db} _]\n    {:http-xhrio {:method           :get\n                  :uri              (str (:beckend-uri @app-state) \"patients/get-all\")\n                  :response-format  (ajax/json-response-format {:keywords? true})\n                  :on-success       [:success-get-patients]\n                  :on-failure       [:failure-http-response]}}))\n\n(rf/reg-event-fx\n  :delete-patients\n  (fn [{db :db} _]\n    {:http-xhrio {:method           :get\n                  :uri              (str (:beckend-uri @app-state) \"patients/get-all\")\n                  :response-format  (ajax/json-response-format {:keywords? true})\n                  :on-success       [:success-get-patients]\n                  :on-failure       [:failure-http-response]}}))\n\n(rf/reg-event-fx\n  :update-patients\n  (fn [{db :db} _]\n    {:http-xhrio {:method           :get\n                  :uri              (str (:beckend-uri @app-state) \"patients/get-all\")\n                  :response-format  (ajax/json-response-format {:keywords? true})\n                  :on-success       [:success-get-patients]\n                  :on-failure       [:failure-http-response]}}))\n\n(defn cljsfy-vec [in]\n  (let [out (js->clj in :keywordize-keys true)]\n    (mapv #(update % :patients/dob (fn [old] (js/Date. old))) out)))\n\n(rf/reg-event-db\n  :set-error\n  (fn [db [_ error]]\n    (assoc db :error error)))\n\n(rf/reg-event-db\n  :success-add-patients\n  (fn [db [_ response]]\n    (update db :patients (conj (cljsfy-vec response)))))\n\n(rf/reg-event-db\n  :failure-http-response\n  (fn [db [_ response]]\n    (assoc db :error response)))\n\n(rf/reg-event-db\n  :success-get-patients\n  (fn [db [_ response]]\n    (assoc db :patients (cljsfy-vec response))))\n\n;-------------------------------------------------------------------------------fio input events\n(rf/reg-sub\n  :new-patient\n  (fn [db _]\n    (:new-patient db)))\n\n(rf/reg-sub\n  :new-patient-fio\n  (fn [_ _]\n    (rf/subscribe [:new-patient]))\n  (fn [patient _]\n    (:patients/fio patient)))\n\n(rf/reg-event-db\n  :new-patient-fio-valid\n  (fn [db [_ valid]]\n    (update-in db [:new-patient-is-valid :fio-valid] (fn [old] valid))))\n\n(rf/reg-fx\n  :new-patient-fio-validation\n  (fn [fio]\n    (if (= 0 (count fio))\n      (do (rf/dispatch [:set-error nil])\n          (rf/dispatch [:new-patient-fio-valid false]))\n      (if (> (count fio) 200)\n        (rf/dispatch [:set-error \"To many characters in field FIO\"])\n        (if-let [valid (re-matches #\"[\u0430-\u044f\u0410-\u042fA-Za-z \\-\\(\\)]+\" fio)]\n          (do (rf/dispatch [:new-patient-fio-valid true])\n              (rf/dispatch [:set-error nil]))\n          (do (rf/dispatch [:new-patient-fio-valid false])\n              (rf/dispatch [:set-error \"Unacceptable chracters in field FIO\"])))))))\n\n(rf/reg-event-fx\n  :new-patient-fio-update\n  (fn [cofx [_ fio]]\n     {:db (update-in (:db cofx) [:new-patient :patients/fio] (fn [old] fio))\n      :fx [[:new-patient-fio-validation fio]]}))\n\n;-------------------------------------------------------------------------------oms input events\n(rf/reg-sub\n  :new-patient-oms\n  (fn [_]\n    (rf/subscribe [:new-patient]))\n  (fn [patient _]\n    (:patients/oms patient)))\n\n(rf/reg-event-db\n  :new-patient-oms-valid\n  (fn [db [_ valid]]\n    (update-in db [:new-patient-is-valid :oms-valid] (fn [old] valid))))\n\n(rf/reg-fx\n  :new-patient-oms-validation\n  (fn [oms]\n    (if (= 0 (count oms))\n      (do (rf/dispatch [:set-error nil])\n          (rf/dispatch [:new-patients-oms-valid false]))\n      (if (> (count oms) 16)\n        (rf/dispatch [:set-error \"To many characters in field OMS\"])\n        (if-let [valid (re-matches #\"[0-9]+\" oms)]\n          (do (rf/dispatch [:new-patient-oms-valid true])\n              (rf/dispatch [:set-error nil]))\n          (do (rf/dispatch [:new-patient-oms-valid false])\n              (rf/dispatch [:set-error \"Unacceptable chracters in field OMS\"])))))))\n\n(rf/reg-event-fx\n  :new-patient-oms-update\n  (fn [cofx [_ oms]]\n     {:db (update-in (:db cofx) [:new-patient :patients/oms] (fn [old] oms))\n      :fx [[:new-patient-oms-validation oms]]}))\n\n;------------------------------------------------------------------------------gender input events\n(rf/reg-sub\n  :new-patient-gender\n  (fn [_]\n    (rf/subscribe [:new-patient]))\n  (fn [patient _]\n    (:patients/gender patient)))\n\n(rf/reg-event-db\n  :new-patient-gender-valid\n  (fn [db [_ valid]]\n    (update-in db [:new-patient-is-valid :gender-valid] (fn [old] valid))))\n\n(rf/reg-fx\n  :new-patient-gender-validation\n  (fn [gender]\n    (if (not (nil? gender))\n      (rf/dispatch [:new-patient-is-valid true])\n      (rf/dispatch [:new-patient-is-valid false]))))\n\n(rf/reg-event-fx\n  :new-patient-gender-update\n  (fn [cofx [_ gender]]\n     {:db (update-in (:db cofx) [:new-patient :patients/gender] (fn [old] gender))\n      :fx [[:new-patient-gender-validation gender]]}))\n"]}