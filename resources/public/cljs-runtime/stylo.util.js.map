{"version":3,"sources":["stylo/util.cljc"],"mappings":";AAWA,AAAA,oBAAA,4BAAAA,hDAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,uDAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,yDAAA,zDAAME,oEACHM,IAAMC;AADT,AAGW,OAACC,8CAAMC,mBAAeH,IAAIC;;;AAHrC,CAAA,4CAAA,5CAAMP;;AAAN;AAAA,CAAA,sCAAA,WAAAC,jDAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAAA,AAKA,wBAAA,xBAAMS,wDACHC,MAAMC;AADT,AAEE,IAAAC,qBAAkC,AAACO,yBAAST;AAA5C,AAAA,oBAAAE;AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;UAAA,AAAAE,4CAAAF,eAAA,jEAAiBG;YAAjB,AAAAD,4CAAAF,eAAA,nEAAqBI;WAArB,AAAAF,4CAAAF,eAAA,lEAA2BK;AAA3B,AACE,8DAAA,vDAACE,kIACOJ,IAAIC,MAAMC,KAAK,AAACG,eAAKV;;AAC7BD;;;AAEJ,8BAAA,9BAAMY,oEACHC;AADH,AAEE,IAAAC,oBAAK,OAASD;AAAd,AAAA,GAAAC;AACK,4BAAA,rBAACC,sCAA4BF;;AADlCC;;;AAGF,6BAAA,7BAAME,kEACHH;AADH,AAEE,IAAAI,aAAc,qBAAA,rBAACF,sCAA4BF;QAA3C,AAAAK,4CAAAD,WAAA,IAAA,/DAAOE;QAAP,AAAAD,4CAAAD,WAAA,IAAA,/DAASG;QAAT,AAAAF,4CAAAD,WAAA,IAAA,/DAAWI;AAAX,AAEW,QAAG,AAACC,WAAcF,KAAG,AAACE,WAAcD;;AAEjD,AAAA,qBAAA,6BAAAtC,lDAAMyC;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,iDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,iDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,mDAAA,nDAAMD,8DACFE;AADJ,AAEG,0DAAA,nDAACC,iDAAQD;;;AAFZ,CAAA,mDAAA,nDAAMF,8DAGFE,EAAEE;AAHN,AAIG,GACE,AAACC,yBAAYH;AAAGA;;AADlB,oBAEE,AAACd,4BAAWc;AAAG,OAACI,qBAAc,CAAA,QAAO,AAACd,2BAAgBU;;AAFxD,GAGE,OAASA;AAAGA;;AAHd,AAIQ,IAAAK,WAAMH;IAANG,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AACM,OAACE,gBAASP;;;KADhB;AAEM,OAACQ,gBAASR;;;KAFhB;AAGO,OAACS,iBAAUT;;;KAHlB;AAIO,OAACU,iBAAU,KAAA,JAAGV;;;KAJrB;AAKW,OAACI,qBAAcJ;;;;AAL1B,MAAA,KAAAD,MAAA,CAAA,mEAAAM;;;;;;;;;AARX,CAAA,6CAAA,7CAAMP;;AAAN,AAgBA","names":["var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","stylo.util/format","seq54122","G__54123","cljs.core/first","cljs.core/next","self__5754__auto__","fmt","args","cljs.core.apply","goog.string/format","stylo.util/with-alpha","color","variable","temp__5802__auto__","map__54143","cljs.core/--destructure-map","cljs.core.get","red","green","blue","garden.color/hex->rgb","stylo.util.format","cljs.core/name","stylo.util/str-ratio?","s","and__5043__auto__","cljs.core/re-matches","stylo.util/parse-str-ratio","vec__54146","cljs.core.nth","_","n","d","js/parseFloat","G__54155","stylo.util/as-unit","js/Error","v","stylo.util.as_unit","preferred-unit","garden.units/unit?","garden.units/percent","G__54160","cljs.core/Keyword","garden.units/ms","garden.units/px","garden.units/deg","garden.units/rem"],"sourcesContent":["(ns stylo.util\n  (:refer-clojure :exclude [format])\n  (:require\n   [garden.color :refer [hex->rgb]]\n   [garden.units :as units]\n   #?(:cljs [goog.string :as gstring])\n   #?(:cljs [goog.string.format])\n   #?(:clj [garden.def]))\n  #?(:cljs\n     (:require-macros [garden.def])))\n\n(defn format\n  [fmt & args]\n  #?(:clj (apply clojure.core/format fmt args)\n     :cljs (apply gstring/format fmt args)))\n\n(defn with-alpha\n  [color variable]\n  (if-let [{:keys [red green blue]} (hex->rgb color)]\n    (format \"rgba(%d,%d,%d,var(%s))\"\n            red green blue (name variable))\n    color))\n\n(defn str-ratio?\n  [s]\n  (and (string? s)\n       (re-matches #\"(-?\\d+)/(\\d+)\" s)))\n\n(defn parse-str-ratio\n  [s]\n  (let [[_ n d] (re-matches #\"(-?\\d+)/(\\d+)\" s)]\n    #?(:clj (/ (Double/parseDouble n) (Double/parseDouble d))\n       :cljs (/ (js/parseFloat n) (js/parseFloat d)))))\n\n(defn as-unit\n  ([v]\n   (as-unit v :rem))\n  ([v preferred-unit]\n   (cond\n     (units/unit? v) v\n     (str-ratio? v) (units/percent (* 100 (parse-str-ratio v)))\n     (string? v) v\n     :else (case preferred-unit\n             :ms (units/ms v)\n             :px (units/px v)\n             :deg (units/deg v)\n             :rem (units/rem (* v 0.25))\n             :percent (units/percent v)))))\n\n\n(comment\n  (garden.compiler/render-css (units/percent 42))\n  (garden.compiler/render-css (as-unit \"3/4\")))\n"]}