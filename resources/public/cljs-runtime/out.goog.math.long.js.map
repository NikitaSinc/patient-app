{
"version":3,
"file":"out.goog.math.long.js",
"lineCount":407,
"mappings":"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",
"sources":["out/goog/math/long.js"],
"sourcesContent":["/*TRANSPILED*/goog.loadModule(function(exports) {'use strict';/*\n\n Copyright The Closure Library Authors.\n SPDX-License-Identifier: Apache-2.0\n*/\n'use strict';\ngoog.module(\"goog.math.Long\");\ngoog.module.declareLegacyNamespace();\nconst asserts = goog.require(\"goog.asserts\");\nconst reflect = goog.require(\"goog.reflect\");\nclass Long {\n  constructor(low, high) {\n    this.low_ = low | 0;\n    this.high_ = high | 0;\n  }\n  toInt() {\n    return this.low_;\n  }\n  toNumber() {\n    return this.high_ * TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();\n  }\n  isSafeInteger() {\n    var top11Bits = this.high_ >> 21;\n    return top11Bits == 0 || top11Bits == -1 && !(this.low_ == 0 && this.high_ == (4292870144 | 0));\n  }\n  toString(opt_radix) {\n    var radix = opt_radix || 10;\n    if (radix < 2 || 36 < radix) {\n      throw new Error(\"radix out of range: \" + radix);\n    }\n    if (this.isSafeInteger()) {\n      var asNumber = this.toNumber();\n      return radix == 10 ? \"\" + asNumber : asNumber.toString(radix);\n    }\n    var safeDigits = 14 - (radix >> 2);\n    var radixPowSafeDigits = Math.pow(radix, safeDigits);\n    var radixToPower = Long.fromBits(radixPowSafeDigits, radixPowSafeDigits / TWO_PWR_32_DBL_);\n    var remDiv = this.div(radixToPower);\n    var val = Math.abs(this.subtract(remDiv.multiply(radixToPower)).toNumber());\n    var digits = radix == 10 ? \"\" + val : val.toString(radix);\n    if (digits.length < safeDigits) {\n      digits = \"0000000000000\".substr(digits.length - safeDigits) + digits;\n    }\n    val = remDiv.toNumber();\n    return (radix == 10 ? val : val.toString(radix)) + digits;\n  }\n  getHighBits() {\n    return this.high_;\n  }\n  getLowBits() {\n    return this.low_;\n  }\n  getLowBitsUnsigned() {\n    return this.low_ >>> 0;\n  }\n  getNumBitsAbs() {\n    if (this.isNegative()) {\n      if (this.equals(Long.getMinValue())) {\n        return 64;\n      } else {\n        return this.negate().getNumBitsAbs();\n      }\n    } else {\n      var val = this.high_ != 0 ? this.high_ : this.low_;\n      for (var bit = 31; bit > 0; bit--) {\n        if ((val & 1 << bit) != 0) {\n          break;\n        }\n      }\n      return this.high_ != 0 ? bit + 33 : bit + 1;\n    }\n  }\n  isZero() {\n    return this.low_ == 0 && this.high_ == 0;\n  }\n  isNegative() {\n    return this.high_ < 0;\n  }\n  isOdd() {\n    return (this.low_ & 1) == 1;\n  }\n  hashCode() {\n    return this.getLowBits() ^ this.getHighBits();\n  }\n  equals(other) {\n    return this.low_ == other.low_ && this.high_ == other.high_;\n  }\n  notEquals(other) {\n    return !this.equals(other);\n  }\n  lessThan(other) {\n    return this.compare(other) < 0;\n  }\n  lessThanOrEqual(other) {\n    return this.compare(other) <= 0;\n  }\n  greaterThan(other) {\n    return this.compare(other) > 0;\n  }\n  greaterThanOrEqual(other) {\n    return this.compare(other) >= 0;\n  }\n  compare(other) {\n    if (this.high_ == other.high_) {\n      if (this.low_ == other.low_) {\n        return 0;\n      }\n      return this.getLowBitsUnsigned() > other.getLowBitsUnsigned() ? 1 : -1;\n    }\n    return this.high_ > other.high_ ? 1 : -1;\n  }\n  negate() {\n    var negLow = ~this.low_ + 1 | 0;\n    var overflowFromLow = !negLow;\n    var negHigh = ~this.high_ + overflowFromLow | 0;\n    return Long.fromBits(negLow, negHigh);\n  }\n  add(other) {\n    var a48 = this.high_ >>> 16;\n    var a32 = this.high_ & 65535;\n    var a16 = this.low_ >>> 16;\n    var a00 = this.low_ & 65535;\n    var b48 = other.high_ >>> 16;\n    var b32 = other.high_ & 65535;\n    var b16 = other.low_ >>> 16;\n    var b00 = other.low_ & 65535;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 65535;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 65535;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 65535;\n    c48 += a48 + b48;\n    c48 &= 65535;\n    return Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);\n  }\n  subtract(other) {\n    return this.add(other.negate());\n  }\n  multiply(other) {\n    if (this.isZero()) {\n      return this;\n    }\n    if (other.isZero()) {\n      return other;\n    }\n    var a48 = this.high_ >>> 16;\n    var a32 = this.high_ & 65535;\n    var a16 = this.low_ >>> 16;\n    var a00 = this.low_ & 65535;\n    var b48 = other.high_ >>> 16;\n    var b32 = other.high_ & 65535;\n    var b16 = other.low_ >>> 16;\n    var b00 = other.low_ & 65535;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 65535;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 65535;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 65535;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 65535;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 65535;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 65535;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 65535;\n    return Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);\n  }\n  div(other) {\n    if (other.isZero()) {\n      throw new Error(\"division by zero\");\n    }\n    if (this.isNegative()) {\n      if (this.equals(Long.getMinValue())) {\n        if (other.equals(Long.getOne()) || other.equals(Long.getNegOne())) {\n          return Long.getMinValue();\n        }\n        if (other.equals(Long.getMinValue())) {\n          return Long.getOne();\n        }\n        var halfThis = this.shiftRight(1);\n        var approx = halfThis.div(other).shiftLeft(1);\n        if (approx.equals(Long.getZero())) {\n          return other.isNegative() ? Long.getOne() : Long.getNegOne();\n        }\n        var rem = this.subtract(other.multiply(approx));\n        var result = approx.add(rem.div(other));\n        return result;\n      }\n      if (other.isNegative()) {\n        return this.negate().div(other.negate());\n      }\n      return this.negate().div(other).negate();\n    }\n    if (this.isZero()) {\n      return Long.getZero();\n    }\n    if (other.isNegative()) {\n      if (other.equals(Long.getMinValue())) {\n        return Long.getZero();\n      }\n      return this.div(other.negate()).negate();\n    }\n    var res = Long.getZero();\n    var rem = this;\n    while (rem.greaterThanOrEqual(other)) {\n      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n      var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n      var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);\n      var approxRes = Long.fromNumber(approx);\n      var approxRem = approxRes.multiply(other);\n      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n        approx -= delta;\n        approxRes = Long.fromNumber(approx);\n        approxRem = approxRes.multiply(other);\n      }\n      if (approxRes.isZero()) {\n        approxRes = Long.getOne();\n      }\n      res = res.add(approxRes);\n      rem = rem.subtract(approxRem);\n    }\n    return res;\n  }\n  modulo(other) {\n    return this.subtract(this.div(other).multiply(other));\n  }\n  not() {\n    return Long.fromBits(~this.low_, ~this.high_);\n  }\n  and(other) {\n    return Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);\n  }\n  or(other) {\n    return Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);\n  }\n  xor(other) {\n    return Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);\n  }\n  shiftLeft(numBits) {\n    numBits &= 63;\n    if (numBits == 0) {\n      return this;\n    } else {\n      var low = this.low_;\n      if (numBits < 32) {\n        var high = this.high_;\n        return Long.fromBits(low << numBits, high << numBits | low >>> 32 - numBits);\n      } else {\n        return Long.fromBits(0, low << numBits - 32);\n      }\n    }\n  }\n  shiftRight(numBits) {\n    numBits &= 63;\n    if (numBits == 0) {\n      return this;\n    } else {\n      var high = this.high_;\n      if (numBits < 32) {\n        var low = this.low_;\n        return Long.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits);\n      } else {\n        return Long.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1);\n      }\n    }\n  }\n  shiftRightUnsigned(numBits) {\n    numBits &= 63;\n    if (numBits == 0) {\n      return this;\n    } else {\n      var high = this.high_;\n      if (numBits < 32) {\n        var low = this.low_;\n        return Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits);\n      } else if (numBits == 32) {\n        return Long.fromBits(high, 0);\n      } else {\n        return Long.fromBits(high >>> numBits - 32, 0);\n      }\n    }\n  }\n  static fromInt(value) {\n    var intValue = value | 0;\n    asserts.assert(value === intValue, \"value should be a 32-bit integer\");\n    if (-128 <= intValue && intValue < 128) {\n      return getCachedIntValue_(intValue);\n    } else {\n      return new Long(intValue, intValue < 0 ? -1 : 0);\n    }\n  }\n  static fromNumber(value) {\n    if (value > 0) {\n      if (value >= TWO_PWR_63_DBL_) {\n        return Long.getMaxValue();\n      }\n      return new Long(value, value / TWO_PWR_32_DBL_);\n    } else if (value < 0) {\n      if (value <= -TWO_PWR_63_DBL_) {\n        return Long.getMinValue();\n      }\n      return (new Long(-value, -value / TWO_PWR_32_DBL_)).negate();\n    } else {\n      return Long.getZero();\n    }\n  }\n  static fromBits(lowBits, highBits) {\n    return new Long(lowBits, highBits);\n  }\n  static fromString(str, opt_radix) {\n    if (str.charAt(0) == \"-\") {\n      return Long.fromString(str.substring(1), opt_radix).negate();\n    }\n    var numberValue = parseInt(str, opt_radix || 10);\n    if (numberValue <= MAX_SAFE_INTEGER_) {\n      return new Long(numberValue % TWO_PWR_32_DBL_ | 0, numberValue / TWO_PWR_32_DBL_ | 0);\n    }\n    if (str.length == 0) {\n      throw new Error(\"number format error: empty string\");\n    }\n    if (str.indexOf(\"-\") >= 0) {\n      throw new Error('number format error: interior \"-\" character: ' + str);\n    }\n    var radix = opt_radix || 10;\n    if (radix < 2 || 36 < radix) {\n      throw new Error(\"radix out of range: \" + radix);\n    }\n    var radixToPower = Long.fromNumber(Math.pow(radix, 8));\n    var result = Long.getZero();\n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i);\n      var value = parseInt(str.substring(i, i + size), radix);\n      if (size < 8) {\n        var power = Long.fromNumber(Math.pow(radix, size));\n        result = result.multiply(power).add(Long.fromNumber(value));\n      } else {\n        result = result.multiply(radixToPower);\n        result = result.add(Long.fromNumber(value));\n      }\n    }\n    return result;\n  }\n  static isStringInRange(str, opt_radix) {\n    var radix = opt_radix || 10;\n    if (radix < 2 || 36 < radix) {\n      throw new Error(\"radix out of range: \" + radix);\n    }\n    var extremeValue = str.charAt(0) == \"-\" ? MIN_VALUE_FOR_RADIX_[radix] : MAX_VALUE_FOR_RADIX_[radix];\n    if (str.length < extremeValue.length) {\n      return true;\n    } else if (str.length == extremeValue.length && str <= extremeValue) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  static getZero() {\n    return ZERO_;\n  }\n  static getOne() {\n    return ONE_;\n  }\n  static getNegOne() {\n    return NEG_ONE_;\n  }\n  static getMaxValue() {\n    return MAX_VALUE_;\n  }\n  static getMinValue() {\n    return MIN_VALUE_;\n  }\n  static getTwoPwr24() {\n    return TWO_PWR_24_;\n  }\n}\nexports = Long;\nconst IntCache_ = {};\nfunction getCachedIntValue_(value) {\n  return reflect.cache(IntCache_, value, function(val) {\n    return new Long(val, val < 0 ? -1 : 0);\n  });\n}\nconst MAX_VALUE_FOR_RADIX_ = [\"\", \"\", \"111111111111111111111111111111111111111111111111111111111111111\", \"2021110011022210012102010021220101220221\", \"13333333333333333333333333333333\", \"1104332401304422434310311212\", \"1540241003031030222122211\", \"22341010611245052052300\", \"777777777777777777777\", \"67404283172107811827\", \"9223372036854775807\", \"1728002635214590697\", \"41a792678515120367\", \"10b269549075433c37\", \"4340724c6c71dc7a7\", \"160e2ad3246366807\", \"7fffffffffffffff\", \"33d3d8307b214008\", \"16agh595df825fa7\", \n\"ba643dci0ffeehh\", \"5cbfjia3fh26ja7\", \"2heiciiie82dh97\", \"1adaibb21dckfa7\", \"i6k448cf4192c2\", \"acd772jnc9l0l7\", \"64ie1focnn5g77\", \"3igoecjbmca687\", \"27c48l5b37oaop\", \"1bk39f3ah3dmq7\", \"q1se8f0m04isb\", \"hajppbc1fc207\", \"bm03i95hia437\", \"7vvvvvvvvvvvv\", \"5hg4ck9jd4u37\", \"3tdtk1v8j6tpp\", \"2pijmikexrxp7\", \"1y2p0ij32e8e7\"];\nconst MIN_VALUE_FOR_RADIX_ = [\"\", \"\", \"-1000000000000000000000000000000000000000000000000000000000000000\", \"-2021110011022210012102010021220101220222\", \"-20000000000000000000000000000000\", \"-1104332401304422434310311213\", \"-1540241003031030222122212\", \"-22341010611245052052301\", \"-1000000000000000000000\", \"-67404283172107811828\", \"-9223372036854775808\", \"-1728002635214590698\", \"-41a792678515120368\", \"-10b269549075433c38\", \"-4340724c6c71dc7a8\", \"-160e2ad3246366808\", \"-8000000000000000\", \"-33d3d8307b214009\", \n\"-16agh595df825fa8\", \"-ba643dci0ffeehi\", \"-5cbfjia3fh26ja8\", \"-2heiciiie82dh98\", \"-1adaibb21dckfa8\", \"-i6k448cf4192c3\", \"-acd772jnc9l0l8\", \"-64ie1focnn5g78\", \"-3igoecjbmca688\", \"-27c48l5b37oaoq\", \"-1bk39f3ah3dmq8\", \"-q1se8f0m04isc\", \"-hajppbc1fc208\", \"-bm03i95hia438\", \"-8000000000000\", \"-5hg4ck9jd4u38\", \"-3tdtk1v8j6tpq\", \"-2pijmikexrxp8\", \"-1y2p0ij32e8e8\"];\nconst MAX_SAFE_INTEGER_ = 9007199254740991;\nconst TWO_PWR_32_DBL_ = 4294967296;\nconst TWO_PWR_63_DBL_ = 0x7fffffffffffffff;\nconst ZERO_ = Long.fromBits(0, 0);\nconst ONE_ = Long.fromBits(1, 0);\nconst NEG_ONE_ = Long.fromBits(-1, -1);\nconst MAX_VALUE_ = Long.fromBits(4294967295, 2147483647);\nconst MIN_VALUE_ = Long.fromBits(0, 2147483648);\nconst TWO_PWR_24_ = Long.fromBits(1 << 24, 0);\n\n;return exports;});\n"],
"names":["goog","loadModule","exports","module","declareLegacyNamespace","asserts","require","reflect","Long","constructor","low","high","low_","high_","toInt","toNumber","TWO_PWR_32_DBL_","getLowBitsUnsigned","isSafeInteger","top11Bits","toString","opt_radix","radix","Error","asNumber","safeDigits","radixPowSafeDigits","Math","pow","radixToPower","fromBits","remDiv","div","val","abs","subtract","multiply","digits","length","substr","getHighBits","getLowBits","getNumBitsAbs","isNegative","equals","getMinValue","negate","bit","isZero","isOdd","hashCode","other","notEquals","lessThan","compare","lessThanOrEqual","greaterThan","greaterThanOrEqual","negLow","overflowFromLow","negHigh","add","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","getOne","getNegOne","halfThis","shiftRight","approx","shiftLeft","getZero","rem","result","res","max","floor","log2","ceil","log","LN2","delta","approxRes","fromNumber","approxRem","modulo","not","and","or","xor","numBits","shiftRightUnsigned","fromInt","value","intValue","assert","getCachedIntValue_","TWO_PWR_63_DBL_","getMaxValue","lowBits","highBits","fromString","str","charAt","substring","numberValue","parseInt","MAX_SAFE_INTEGER_","indexOf","i","size","min","power","isStringInRange","extremeValue","MIN_VALUE_FOR_RADIX_","MAX_VALUE_FOR_RADIX_","ZERO_","ONE_","NEG_ONE_","MAX_VALUE_","MIN_VALUE_","getTwoPwr24","TWO_PWR_24_","IntCache_","cache"]
}
