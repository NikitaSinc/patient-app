{"version":3,"sources":["stylo/rule.cljc"],"mappings":";AAEA,GAAA,QAAAA,kCAAAC,uCAAAC;AAAA;AAAA,AAAA,kBAAA,iBAAAC,6BAAA,AAAAC,6CAAA,7GAAUS;IAAVR,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,2CAAA,4DAAA,sFAAA,gEAAA,iBAAAC,eAAA;AAAA,AAAA,QAAAA,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,aAAA,QAAe;mCAAKE,EAAIC;AAAT,AAAYD;;yBAAPA;IAAIC;;;;EAAAA;;oCAAJD,EAAIC;;;IAAJD;IAAIC;0BAAJD,EAAIC;;;;;CAAxB,8EAAAP,wBAAAL,2BAAAE,2BAAAC,2BAAAC;;;AAEA,AAAAM,4DAAA,8EAAA;mCACGC,EAAIE;AADP,AAAA,0FAAA,mFAAA,8CAAA,gDAEQF,EAAE,AAACG,wGAAOD;;yBADfF;IAAIE;;;;EAAAA;;oCAAJF,EAAIE;;;IAAJF;IAAIE;0BAAJF,EAAIE;;;;;;AAGP,AAAA,sBAAA,8BAAAE,pDAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,kDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,kDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,oDAAA,pDAAMD,+DACFE;AADJ,AAEE,IAAAC,aAAA,AAAAC,cAAcF;IAAdG,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,IAAAE,aAAA,AAAAH,kDAAAE;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASd;QAAT,AAAAe,4CAAAD,WAAA,IAAA,/DAAWW;AAAX,AAAA,AACE,GAAI,AAACC,6BAAaD;AACjB,AAAA1B,8DAAA,FAAgBC;kBAAGC;AAAnB,AAAA,0FAAA,mFAAA,8CACOwB;;;;AACP,AAAA1B,8DAAA,FAAgBC;kBAAGC,EAAE0B;AAArB,AAAA,0FAAA,mFAAA,8CACO,CAACF,kCAAAA,qCAAAA,LAAEE,iBAAAA;;;;;AALb;AAAA,eAAAlB;eAAAE;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAAG,qBAAA,AAAAN,cAAAD;AAAA,AAAA,GAAAO;AAAA,AAAA,IAAAP,iBAAAO;AAAA,AAAA,GAAA,AAAAC,6BAAAR;AAAA,IAAAS,kBAAA,AAAAC,sBAAAV;AAAA,AAAA,eAAA,AAAAW,qBAAAX;eAAAS;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,IAAAI,aAAA,AAAAC,gBAAAd;QAAA,AAAAM,4CAAAO,WAAA,IAAA,/DAAStB;QAAT,AAAAe,4CAAAO,WAAA,IAAA,/DAAWG;AAAX,AAAA,AACE,GAAI,AAACC,6BAAaD;AACjB,AAAA1B,8DAAA,FAAgBC;kBAAGC;AAAnB,AAAA,0FAAA,mFAAA,8CACOwB;;;;AACP,AAAA1B,8DAAA,FAAgBC;kBAAGC,EAAE0B;AAArB,AAAA,0FAAA,mFAAA,8CACO,CAACF,kCAAAA,qCAAAA,LAAEE,iBAAAA;;;;;AALb;AAAA,eAAA,AAAAH,eAAAf;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;;AAFF,CAAA,oDAAA,pDAAMH,+DAQFE,MAAMoB;AARV,AASG,IAAAC,aAAA,AAAAnB,cAAcF;IAAdsB,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,IAAAE,aAAA,AAAAH,kDAAAE;QAAA,AAAAjB,4CAAAkB,WAAA,IAAA,/DAASjC;QAAT,AAAAe,4CAAAkB,WAAA,IAAA,/DAAWR;AAAX,AAAA,AACC,GAAI,AAACC,6BAAaD;AACjB,AAAA1B,8DAAA,FAAgBC;kBAAGC;AAAnB,AAAA,0FAAA,mFACI,CAAA,kDAAW2B,8BAAoBH;;;;AACnC,AAAA1B,8DAAA,FAAgBC;kBAAGC,EAAE0B;AAArB,AAAA,0FAAA,mFACI,CAAA,kDAAWC,8BAAoB,CAACH,kCAAAA,qCAAAA,LAAEE,iBAAAA;;;;;AALxC;AAAA,eAAAE;eAAAC;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAAhB,qBAAA,AAAAN,cAAAmB;AAAA,AAAA,GAAAb;AAAA,AAAA,IAAAa,iBAAAb;AAAA,AAAA,GAAA,AAAAC,6BAAAY;AAAA,IAAAX,kBAAA,AAAAC,sBAAAU;AAAA,AAAA,eAAA,AAAAT,qBAAAS;eAAAX;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,IAAAgB,aAAA,AAAAX,gBAAAM;QAAA,AAAAd,4CAAAmB,WAAA,IAAA,/DAASlC;QAAT,AAAAe,4CAAAmB,WAAA,IAAA,/DAAWT;AAAX,AAAA,AACC,GAAI,AAACC,6BAAaD;AACjB,AAAA1B,8DAAA,FAAgBC;kBAAGC;AAAnB,AAAA,0FAAA,mFACI,CAAA,kDAAW2B,8BAAoBH;;;;AACnC,AAAA1B,8DAAA,FAAgBC;kBAAGC,EAAE0B;AAArB,AAAA,0FAAA,mFACI,CAAA,kDAAWC,8BAAoB,CAACH,kCAAAA,qCAAAA,LAAEE,iBAAAA;;;;;AALxC;AAAA,eAAA,AAAAH,eAAAK;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;;AATH,CAAA,8CAAA,9CAAMvB;;AAAN,AAgBA,+BAAA,/BAAM6B,sEACHC;AADH,AAIO,OAACE,6CACC,WAAAC;AAAA,AAAA,IAAAC,aAAAD;eAAA,AAAAxB,4CAAAyB,WAAA,IAAA,tEAAMC;eAAN,AAAA1B,4CAAAyB,WAAA,IAAA,tEAAeJ;AAAf,AACE,IAAMM,QAAM,AAACC,+CAAOC,gBAAM,AAACC,4CAAIC,iBAAOV;IAChCW,WAAS,AAACJ,+CAAOK,iBAAO,4CAAA,WAAAC,vDAACJ;AAAD,AAAM,oDAAA,IAAAI,jDAACC;GAAUd;AAD/C,AAEE,IAAAe,WAAA,mFAASV;IAATU,eAAA,qFAAAA,nFACE,AAACzC,cAAIgC,QAAO,6CAAAS,7CAACC,sDAAKV;AADpB,AAAA,GAEE,AAAChC,cAAIqC;AAAU,oDAAAI,7CAACE,0DAAKN;;AAFvBI;;sCANNf,nCACA,AAACC,mBAASd;;AASjB,wBAAA,xBAAM+B,wDACH9C;AADH,oCAGO,sDAAA,WAAA+C,jEAACC,pCAMD,OAACrB;AAND,AACG,GACE,EAAK,4BAAAoB,5BAACE,mDAAe,mDAAAF,nDAACG,uBAAOD;AAD/BF;;AAAA,GAEE,4BAAAA,5BAACE;AAAe,qEAAAF,9DAACI,8CAAM5D;;AAFzB,GAGE,qBAAAwD,rBAACK;AAHH,0FAAA,mFAAA,8CAAAL;;AAAA,AAIQ,qDAAAA,9CAACxD;;;;;qDANZS","names":["js/stylo","js/stylo.rule","js/stylo.rule.rule","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","cljs.core.get","fexpr__26667","cljs.core/MultiFn","cljs.core.symbol","stylo.rule/rule","k","_","types","cljs.core.pr_str","var_args","G__26674","stylo.rule/defrules","js/Error","rules","seq__26689","cljs.core/seq","chunk__26690","count__26691","i__26692","vec__26747","cljs.core.nth","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__26759","cljs.core/first","cljs.core/next","v","cljs.core/associative?","x","pseudo-element-key","seq__26762","chunk__26763","count__26764","i__26765","vec__26772","vec__26775","stylo.rule/merge-by-selector","exps","cljs.core/group-by","cljs.core.mapv","p__26782","vec__26783","selector","style","cljs.core.reduce","cljs.core/merge","cljs.core.map","cljs.core/second","children","cljs.core/concat","p1__26781#","cljs.core.drop","G__26788","cljs.core.conj","cljs.core.into","stylo.rule/join-rules","p1__26789#","cljs.core.mapcat","cljs.core/sequential?","cljs.core/every?","cljs.core.apply","cljs.core/map?"],"sourcesContent":["(ns stylo.rule)\n\n(defmulti rule (fn [k & _] k) :default ::default)\n\n(defmethod rule ::default\n  [k & types]\n  [[:& {k (pr-str types)}]])\n\n(defn defrules\n  ([rules]\n  (doseq [[k v] rules]\n    (if (associative? v)\n     (defmethod rule k [_]\n       [[:& v]])\n     (defmethod rule k [_ x]\n       [[:& (v x)]]))))\n  ([rules pseudo-element-key]\n   (doseq [[k v] rules]\n    (if (associative? v)\n     (defmethod rule k [_]\n       [[(str \":&:\" pseudo-element-key) v]])\n     (defmethod rule k [_ x]\n       [[(str \":&:\" pseudo-element-key) (v x)]])))))\n\n(defn merge-by-selector\n  [exps]\n  (->> exps\n       (group-by first)\n       (mapv\n         (fn [[selector exps]]\n           (let [style (reduce merge (map second exps))\n                 children (reduce concat (map #(drop 2 %) exps))]\n             (cond-> [selector]\n               (seq style) (conj style)\n               (seq children) (into children)))))))\n\n(defn join-rules\n  [rules]\n  (->> rules\n       (mapcat\n         #(cond\n            (and (sequential? %) (every? sequential? %)) %\n            (sequential? %) (apply rule %)\n            (map? %) [[:& %]]\n            :else (rule %)))\n       (merge-by-selector)))\n"]}