{"version":3,"sources":["app_events.cljs"],"mappings":";AAOA,AAAKA,uBAAU,gDAAA,2CAAA,4DAAA,iCAAA,4EAAA,KAAA,oEAAA,yBAAA,kEAAA,xaAACC;AAKhB,yDAAA,zDAACC,6HAEC,WAAAC,SAAcK;AAAd,AAAA,IAAAJ,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAMG;AAAN,AAAA,kDAAA,iEAAA,2CAAA,uDAAA,oDAAA,sQAAA,iOAAA,iEAAA,mFAAA,4FAAA,gEAAA,mFAAA,vzBAEkC,uLAAA,1IAAK,AAAA,kGAAA,AAAAE,gBAAeT,+HACpB,+BAAA,2CAAA,8DAAA,xIAACU;;AAIrC,yDAAA,zDAACR,+HAEC,WAAAS,SAAcH;AAAd,AAAA,IAAAI,aAAAD;IAAAC,iBAAA,AAAAP,4BAAAO;SAAA,AAAAN,4CAAAM,eAAA,hEAAML;AAAN,AAAA,kDAAA,iEAAA,2CAAA,uDAAA,mDAAA,uQAAA,iOAAA,iEAAA,mFAAA,6FAAA,gEAAA,mFAAA,zzBAEkC,uLAAA,1IAAK,AAAA,kGAAA,AAAAE,gBAAeT,gIACpB,+BAAA,2CAAA,8DAAA,xIAACU;;AAIrC,yDAAA,zDAACR,+HAEC,WAAAW,SAAcL;AAAd,AAAA,IAAAM,aAAAD;IAAAC,iBAAA,AAAAT,4BAAAS;SAAA,AAAAR,4CAAAQ,eAAA,hEAAMP;AAAN,AAAA,kDAAA,iEAAA,2CAAA,uDAAA,mDAAA,uQAAA,iOAAA,iEAAA,mFAAA,6FAAA,gEAAA,mFAAA,zzBAEkC,uLAAA,1IAAK,AAAA,kGAAA,AAAAE,gBAAeT,gIACpB,+BAAA,2CAAA,8DAAA,xIAACU;;AAIrC,yDAAA,zDAACR,+HAEC,WAAAa,SAAcP;AAAd,AAAA,IAAAQ,aAAAD;IAAAC,iBAAA,AAAAX,4BAAAW;SAAA,AAAAV,4CAAAU,eAAA,hEAAMT;AAAN,AAAA,kDAAA,iEAAA,2CAAA,uDAAA,mDAAA,uQAAA,iOAAA,iEAAA,mFAAA,6FAAA,gEAAA,mFAAA,zzBAEkC,uLAAA,1IAAK,AAAA,kGAAA,AAAAE,gBAAeT,gIACpB,+BAAA,2CAAA,8DAAA,xIAACU;;AAIrC,wBAAA,xBAAMO,wDAAYC;AAAlB,AACE,IAAMC,MAAI,gHAAA,2EAAA,3LAACC,0DAAQF;AAAnB,AACE,oDAAA,WAAAG,xDAACC;AAAD,AAAO,sDAAAD,iBAAA,hEAACE,kIAAuB,WAAKC;AAAL,AAAU,YAAAC,KAAUD;;GAAOL;;AAE9D,yDAAA,zDAACO,6IAEC,cAAAC,HAAKpB;AAAL,AAAA,IAAAqB,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASpB;eAAT,AAAAqB,4CAAAD,WAAA,IAAA,tEAAWE;AAAX,AACE,yDAAA,lDAACP,+CAAOhB,+DAAa,AAACwB,6CAAK,AAACd,sBAAWa;;AAE3C,yDAAA,zDAACJ,+IAEC,cAAAM,HAAKzB;AAAL,AAAA,IAAA0B,aAAAD;QAAA,AAAAH,4CAAAI,WAAA,IAAA,/DAASzB;eAAT,AAAAqB,4CAAAI,WAAA,IAAA,tEAAWH;AAAX,AACE,wDAAA,jDAACI,8CAAM3B,qEAAeuB;;AAE1B,yDAAA,zDAACJ,8IAEC,cAAAS,HAAK5B;AAAL,AAAA,IAAA6B,aAAAD;QAAA,AAAAN,4CAAAO,WAAA,IAAA,/DAAS5B;eAAT,AAAAqB,4CAAAO,WAAA,IAAA,tEAAWN;AAAX,AACE,wDAAA,jDAACI,8CAAM3B,+DAAa,AAACU,sBAAWa","names":["app-events/app-state","reagent.core.atom","re_frame.core.reg_event_fx","p__55065","map__55066","cljs.core/--destructure-map","cljs.core.get","db","_","cljs.core/deref","ajax.core/json-response-format","p__55070","map__55071","p__55072","map__55073","p__55077","map__55078","app-events/cljsfy-vec","in","out","cljs.core.js__GT_clj","p1__55079#","cljs.core.mapv","cljs.core.update","old","js/Date","re_frame.core.reg_event_db","p__55080","vec__55081","cljs.core.nth","response","cljs.core.conj","p__55084","vec__55085","cljs.core.assoc","p__55088","vec__55090"],"sourcesContent":["(ns app-events\n  (:require\n                  [reagent.core :as r]\n                  [re-frame.core :as rf]\n                  [ajax.core :as ajax]\n                  ))\n\n(def app-state (r/atom {:patients []\n                        :selected-patient nil\n                        :beckend-uri \"http://localhost:8080/\"\n                        :http-error nil}))\n\n(rf/reg-event-fx\n  :add-patients\n  (fn [{db :db} _]\n    {:http-xhrio {:method           :post\n                  :uri              (str (:beckend-uri @app-state) \"patients/create\")\n                  :response-format  (ajax/json-response-format {:keywords? true})\n                  :on-success       [:success-add-patients]\n                  :on-failure       [:failure-http-response]}}))\n\n(rf/reg-event-fx\n  :get-patients\n  (fn [{db :db} _]\n    {:http-xhrio {:method           :get\n                  :uri              (str (:beckend-uri @app-state) \"patients/get-all\")\n                  :response-format  (ajax/json-response-format {:keywords? true})\n                  :on-success       [:success-get-patients]\n                  :on-failure       [:failure-http-response]}}))\n\n(rf/reg-event-fx\n  :get-patients\n  (fn [{db :db} _]\n    {:http-xhrio {:method           :get\n                  :uri              (str (:beckend-uri @app-state) \"patients/get-all\")\n                  :response-format  (ajax/json-response-format {:keywords? true})\n                  :on-success       [:success-get-patients]\n                  :on-failure       [:failure-http-response]}}))\n\n(rf/reg-event-fx\n  :get-patients\n  (fn [{db :db} _]\n    {:http-xhrio {:method           :get\n                  :uri              (str (:beckend-uri @app-state) \"patients/get-all\")\n                  :response-format  (ajax/json-response-format {:keywords? true})\n                  :on-success       [:success-get-patients]\n                  :on-failure       [:failure-http-response]}}))\n\n(defn cljsfy-vec [in]\n  (let [out (js->clj in :keywordize-keys true)]\n    (mapv #(update % :patients/dob (fn [old] (js/Date. old))) out)))\n\n(rf/reg-event-db\n  :success-add-patients\n  (fn [db [_ response]]\n    (update db :patients (conj (cljsfy-vec response)))))\n\n(rf/reg-event-db\n  :failure-http-response\n  (fn [db [_ response]]\n    (assoc db :http-error response)))\n\n(rf/reg-event-db\n  :success-get-patients\n  (fn [db [_ response]]\n    (assoc db :patients (cljsfy-vec response))))\n"]}